<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nullなnuma</title>
  
  <subtitle>やりたいことをやる</subtitle>
  <link href="https://blog.nullnuma.com/atom.xml" rel="self"/>
  
  <link href="https://blog.nullnuma.com/"/>
  <updated>2024-04-25T03:00:00.000Z</updated>
  <id>https://blog.nullnuma.com/</id>
  
  <author>
    <name>nullnuma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AirPrint非対応プリンタのプロキシサーバを立てる(Docker)</title>
    <link href="https://blog.nullnuma.com/airprint-proxy/"/>
    <id>https://blog.nullnuma.com/airprint-proxy/</id>
    <published>2024-04-25T03:00:00.000Z</published>
    <updated>2024-04-25T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>自宅のプリンターはEP-802Aという2009年発売のものを未だに使用しています．<br>壊れないのでそのまま使い続けてきたのですが, このプリンターはiOSから印刷を直接可能なAirPrintに非対応となっています．<br>直接印刷できないのは不便と言われてしまったので， AirPrintの印刷を代理で引き受けて印刷してくれるプロキシサーバを立てようと思います．  </p><span id="more"></span><h3 id="AirPrintのプロキシサーバプロジェクト"><a href="#AirPrintのプロキシサーバプロジェクト" class="headerlink" title="AirPrintのプロキシサーバプロジェクト"></a>AirPrintのプロキシサーバプロジェクト</h3><p>プロキシサーバをDockerで動かせるプロジェクトが既に存在しています．<br><a href="https://github.com/SickHub/docker-cups-airprint">docker-cups-airprint</a><br>それをARM64(Raspberry Pi向け?)でも動くように変更したと思われるフォークプロジェクトに<br>docker-composeのスクリプトがあったのでこちらを使用したいと思います.<br><a href="https://github.com/chuckcharlie/cups-avahi-airprint">cups-avahi-airprint</a></p><h3 id="cups-avahi-airprintの導入"><a href="#cups-avahi-airprintの導入" class="headerlink" title="cups-avahi-airprintの導入"></a>cups-avahi-airprintの導入</h3><p>自宅のサーバにはdocker-composeが導入済みなので適当にクローンして実行します．    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line">git <span class="built_in">clone</span> git@github.com:chuckcharlie/cups-avahi-airprint.git</span><br><span class="line"><span class="built_in">cd</span> cups-avahi-airprint</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>(状況を確認したいのでフォアグラウンドで実行した)<br>準備され起動が完了したらプリンタのセットアップを行います．  </p><p>http:&#x2F;&#x2F;&lt;dockerhost&gt;:631&#x2F;にアクセスします．<br>(ポート開放は忘れずに)<br>日本語化されているのには驚きました．<br><img src="/assets/airprint-proxy/cups_setup_home.png" alt="cups_setup_home">  </p><p>上部の管理に移動するとBASIC認証が求められます．<br>クローンしたまま起動した場合はcups&#x2F;cupsで入れます．<br>色々と試した結果プリンターの追加を選択．<br><img src="/assets/airprint-proxy/cups_setup_menu.png" alt="cups_setup_menu"><br>「AppSocket&#x2F;HP JetDirect」を選択．<br><img src="/assets/airprint-proxy/cups_setup_addprinter.png" alt="cups_setup_addprinter"><br>アドレスには「socket:&#x2F;&#x2F;&lt;PRINTERIP&gt;:9100」を入力．<br><img src="/assets/airprint-proxy/cups_setup_addr.png" alt="cups_setup_addr"><br>必要事項を記入し共有にもチェック．<br><img src="/assets/airprint-proxy/cups_setup_printerinfo.png" alt="cups_setup_printerinfo">  </p><p>ここでメーカーを指定して型番を選択すれば追加は完了です．<br>が， EP-802Aは存在しなかったので似ている「Epson EP 801A - CUPS+Gutenprint v5.3.4 Simplified」を選択しました．<br>(EP-801Aでも複数ありますがこれはiOSから検索ができたのでうまくいかない場合はどれか試すと良いかもしれない)<br><img src="/assets/airprint-proxy/cups_setup_maker.png" alt="cups_setup_maker">  </p><p>これで導入は完了です．  </p><h3 id="導入後のテスト"><a href="#導入後のテスト" class="headerlink" title="導入後のテスト"></a>導入後のテスト</h3><p>プリンターの詳細ページからテストページの印刷を選択するとテストページが印刷されます．<br>これでCUPS&lt;-&gt;プリンター間の接続は確認できました．<br><img src="/assets/airprint-proxy/cups_testprint.png" alt="cups_testprint">  </p><p>次にiOSから印刷を試します．<br><img src="/assets/airprint-proxy/iosprint.jpg" alt="iosprint"><br>インクの情報まで見れるようです．<br><img src="/assets/airprint-proxy/iosprinterinfo.jpg" alt="iosprinterinfo"><br>無事印刷できました．  </p><p>ただ時間が立つとiOSからプリンターの検出ができなくなっており， その点は今後の課題です．  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自宅のプリンターはEP-802Aという2009年発売のものを未だに使用しています．&lt;br&gt;壊れないのでそのまま使い続けてきたのですが, このプリンターはiOSから印刷を直接可能なAirPrintに非対応となっています．&lt;br&gt;直接印刷できないのは不便と言われてしまったので， AirPrintの印刷を代理で引き受けて印刷してくれるプロキシサーバを立てようと思います．  &lt;/p&gt;</summary>
    
    
    
    
    <category term="ソフトウェア" scheme="https://blog.nullnuma.com/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2/"/>
    
    <category term="パソコン" scheme="https://blog.nullnuma.com/tags/%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>ハイエースを手に入れた</title>
    <link href="https://blog.nullnuma.com/newcar-hiace/"/>
    <id>https://blog.nullnuma.com/newcar-hiace/</id>
    <published>2024-04-22T03:15:26.000Z</published>
    <updated>2024-04-22T03:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>ハイエースを購入しました．<br>前々から欲しいと思っていたのですが，やっと手に入れることができました．  </p><p><img src="/assets/newcar-hiace/hiace.jpg" alt="hiace"></p><span id="more"></span><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>運転することが好きなので車の購入を考えていました，  </p><ul><li>長距離走るので車中泊がしたい</li><li>快適にスキーに行きたい</li><li>商用車が好き</li></ul><p>などの理由でハイエースが欲しいと思っていました．  </p><h3 id="ベースやオプション"><a href="#ベースやオプション" class="headerlink" title="ベースやオプション"></a>ベースやオプション</h3><p>商用車が好きとはいえ，まちなかと長距離の運転の快適性を考えベースは<br>ハイエース バン S-GLを選択しました．  </p><p><a href="https://toyota.jp/hiacevan/">トヨタ ハイエース バン</a></p><ul><li>ディーゼル仕様<ul><li>長距離走るので</li></ul></li><li>寒冷地仕様<ul><li>ウィンタースポーツをしたい</li></ul></li><li>ハロゲンヘッドライト<ul><li>HIDが好みなので後日付け替え</li></ul></li><li>パワースライドドア<ul><li>あるとやっぱ便利</li></ul></li><li>自動防眩インナーミラー<ul><li>バックカメラが付いてくるので</li></ul></li></ul><p>などのオプションをつけています．  </p><h3 id="購入まで"><a href="#購入まで" class="headerlink" title="購入まで"></a>購入まで</h3><p>いつ買うか悩んでいたのですが， 23年6月ぐらいから受注停止となってしまったので，マイナーチェンジを待っていました．<br>購入した型は8型と呼ばれるようですが法規対応と色が増えたりというだけで7型とあまり変わらないです．<br>受注再開となったのが23年12月初旬に注文を行いました．<br>この時点で2月末ぐらいの納期でした．<br>しかし， 豊田自動織機のエンジン不正があり生産停止のアオリを受けました．．．<br>最終的に納期は1ヶ月半ほど伸び4月19日に納車されました．  </p><h3 id="今後の計画"><a href="#今後の計画" class="headerlink" title="今後の計画"></a>今後の計画</h3><p>ナビやHID， 内装の防音&#x2F;断熱等やることがたくさんあります．  </p><ul><li>社外ナビ取り付け</li><li>HID取り付け</li><li>床の防音&#x2F;断熱と床張り</li><li>天井の防音&#x2F;断熱</li><li>サブバッテリー設置の準備</li><li>リアクーラー&#x2F;ヒーターのコントローラー統合</li></ul><p>備忘録として施工の記録を残したいと思います．  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ハイエースを購入しました．&lt;br&gt;前々から欲しいと思っていたのですが，やっと手に入れることができました．  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/newcar-hiace/hiace.jpg&quot; alt=&quot;hiace&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ひとりごと" scheme="https://blog.nullnuma.com/tags/%E3%81%B2%E3%81%A8%E3%82%8A%E3%81%94%E3%81%A8/"/>
    
    <category term="自動車" scheme="https://blog.nullnuma.com/tags/%E8%87%AA%E5%8B%95%E8%BB%8A/"/>
    
  </entry>
  
  <entry>
    <title>グラボのファンの修理</title>
    <link href="https://blog.nullnuma.com/gpu-fan-repair/"/>
    <id>https://blog.nullnuma.com/gpu-fan-repair/</id>
    <published>2023-04-07T21:28:35.000Z</published>
    <updated>2023-04-08T06:44:53.896Z</updated>
    
    <content type="html"><![CDATA[<p>グラフィックボードを冷やすためについている<br>ファンのブレードを不注意で折ってしまったので<br>交換部品を購入し修理しました，  </p><span id="more"></span><h3 id="現状"><a href="#現状" class="headerlink" title="現状"></a>現状</h3><p>グラフィックボードはZOTAC社のGeForce GTX 1060 6GB Single Fanです．<br>ファンの一部が折れてしまっています．<br><img src="/assets/gpu-fan-repair/brokenparts.jpg" alt="brokenparts"></p><h3 id="修理"><a href="#修理" class="headerlink" title="修理"></a>修理</h3><p>修理部品は手っ取り早くAliexpressで調達しました．<br>このファンの型番は「T129215SH」となっており以下の製品を購入しました．<br><a href="https://ja.aliexpress.com/item/1005004456079255.html">グラフィックカード冷却ファン,85mm,4ピン,t129215sh ga92s2u,gtx 1060,zotac gtx 950 960 1060,P106-90,P106-100用</a>  </p><p>早速修理を行います．<br>外装のネジは4箇所あるので取ります．<br><img src="/assets/gpu-fan-repair/bolt.jpg" alt="bolt">  </p><p>ファン自体はヒートシンクにネジ3箇所で取り付けられています．<br><img src="/assets/gpu-fan-repair/brokenfan.jpg" alt="brokenfan">  </p><p>これでファン自体は取れるのですが配線がゴムによって<br>ヒートシンクに固定されているので引っ張るなどして取ります．<br>(単純にはめ込みっぽいのでそんなに大変なものではなさそう)<br><img src="/assets/gpu-fan-repair/gum.jpg" alt="gum">  </p><p>型番は同じですが配線の長さが多少異なっていました．<br>長い分には問題ないので良かったです．<br><img src="/assets/gpu-fan-repair/comparefan.jpg" alt="comparefan">  </p><p>逆の手順で戻していけば問題なく修理を終えました．<br><img src="/assets/gpu-fan-repair/after.jpg" alt="after">  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;グラフィックボードを冷やすためについている&lt;br&gt;ファンのブレードを不注意で折ってしまったので&lt;br&gt;交換部品を購入し修理しました，  &lt;/p&gt;</summary>
    
    
    
    
    <category term="パソコン" scheme="https://blog.nullnuma.com/tags/%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3/"/>
    
    <category term="修理" scheme="https://blog.nullnuma.com/tags/%E4%BF%AE%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>冷蔵庫の水漏れ修理</title>
    <link href="https://blog.nullnuma.com/repair-refrigerator-waterleak/"/>
    <id>https://blog.nullnuma.com/repair-refrigerator-waterleak/</id>
    <published>2023-03-22T18:00:25.000Z</published>
    <updated>2023-03-23T04:35:45.955Z</updated>
    
    <content type="html"><![CDATA[<p>買ってから13年以上使用しているシャープの冷蔵庫ですが<br>野菜室の下から水が漏れるようになってきてしまったので修理を行いました.  </p><span id="more"></span><h3 id="冷蔵庫の構造"><a href="#冷蔵庫の構造" class="headerlink" title="冷蔵庫の構造"></a>冷蔵庫の構造</h3><p>このような感じの冷蔵冷凍車です．</p><iframe sandbox="allow-popups allow-scripts allow-modals allow-forms allow-same-origin" style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=FFFFFF&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=nullnuma0d-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B09VBGV13S&linkId=583f72110767af3d77b7ddfc69d0bbb2"></iframe><p>一番下が野菜室，中央が冷凍庫となっているタイプで<br>野菜室の裏にはコンプレッサーがおいてあります．<br>コンプレッサーの上には冷凍庫の内部で空気を冷やす冷却器があります．  </p><p><img src="/assets/repair-refrigerator-waterleak/structure.png" alt="構造">  </p><p>水が発生するのは冷却器でいわゆる結露です．<br>結露したドレン水は排出され外においてあるタンクにたまり蒸発するのを待ちます．</p><h4 id="水漏れの原因"><a href="#水漏れの原因" class="headerlink" title="水漏れの原因"></a>水漏れの原因</h4><p>結露したドレン水がタンクに流れることなく冷蔵庫内部で溢れて<br>野菜室経由で手前に漏れ出したことが原因です.<br>排水パイプがホコリによって詰まってしまっています．  </p><h3 id="修理"><a href="#修理" class="headerlink" title="修理"></a>修理</h3><p>14年も動いていればまあ寿命といえばそれで終わってしまいますが<br>単純な水漏れで排水パイプを清掃すれば問題なく動くため修理をしました．  </p><p>ホコリを除去するためにまずは冷蔵庫の背面パネルを外します．<br>12個ぐらいのネジで止まっているのですべて外しました．<br>(既にホコリが溜まっていますが…)<br><img src="/assets/repair-refrigerator-waterleak/backpanel.jpg" alt="backpanel"></p><p>コントロール基板が見えました．<br>これもまた外します．<br>ネジは多分2箇所です．<br><img src="/assets/repair-refrigerator-waterleak/ctrl.jpg" alt="ctrl"></p><p>コントロール基板の下にドレン水を貯めるタンクが見えます．<br><img src="/assets/repair-refrigerator-waterleak/tank.jpg" alt="tank"></p><p>このドレンパイプが諸悪の根源でした．<br>頑張って引っこ抜いて綺麗に掃除しました．<br><img src="/assets/repair-refrigerator-waterleak/drain_clean.jpg" alt="drain_clean"><br><img src="/assets/repair-refrigerator-waterleak/drain.jpg" alt="drain"><br><img src="/assets/repair-refrigerator-waterleak/drain_pipe.jpg" alt="drain_pipe">  </p><p>これで水漏れの修理は完了です．<br>逆の手順で取り付けていけば問題ありません．  </p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>シャープの冷蔵庫の水漏れを修理しました．<br>ドレンパイプが詰まっていることが原因だったので掃除をしてもとに戻すだけで直りました．  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;買ってから13年以上使用しているシャープの冷蔵庫ですが&lt;br&gt;野菜室の下から水が漏れるようになってきてしまったので修理を行いました.  &lt;/p&gt;</summary>
    
    
    
    
    <category term="修理" scheme="https://blog.nullnuma.com/tags/%E4%BF%AE%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>IX2215のUSBアップデート</title>
    <link href="https://blog.nullnuma.com/ix2215-update/"/>
    <id>https://blog.nullnuma.com/ix2215-update/</id>
    <published>2023-01-13T02:16:27.000Z</published>
    <updated>2023-01-13T12:21:10.957Z</updated>
    
    <content type="html"><![CDATA[<p>IX2215を手に入れたのでファームウェアのアップデートを行いました．<br>IXシリーズのアップデートはTFTPによるアップデートが主流のようですが，<br>わざわざTFTPサーバを用意するのは大変なのでUSBメモリ経由でアップデートを行います．  </p><span id="more"></span><p><img src="/assets/ix2215-update/ix2215.png" alt="ix2215"></p><h3 id="現状の確認"><a href="#現状の確認" class="headerlink" title="現状の確認"></a>現状の確認</h3><p>ブートログやshow versionを確認するとファームウェアのバージョンは<code>9.1.10</code>を使用しています．<br>2015年のファームウェアなようなので結構前のファームウェアでした．  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">NEC Diagnostic Software</span><br><span class="line">Copyright (c) NEC Corporation 2001-2015. All rights reserved.</span><br><span class="line"></span><br><span class="line">%DIAG-INFO: Starting System POST(Power On Self Test)</span><br><span class="line"></span><br><span class="line">               DRAM TEST 1: Pass</span><br><span class="line">               DRAM TEST 2: Pass</span><br><span class="line">                NVRAM TEST: Pass</span><br><span class="line">                  CPU TEST: Pass</span><br><span class="line">                  PLD TEST: Pass</span><br><span class="line">                  GE0 TEST: Pass</span><br><span class="line">                  GE1 TEST: Pass</span><br><span class="line">       GE2(SW-HUB)1-8 TEST: Pass</span><br><span class="line">                  BRI TEST: Pass</span><br><span class="line">                  USB TEST: Pass</span><br><span class="line">        1.0 VOLTAGE STATUS: 0.987V Pass</span><br><span class="line">        1.5 VOLTAGE STATUS: 1.481V Pass</span><br><span class="line">        2.5 VOLTAGE STATUS: 2.457V Pass</span><br><span class="line">        3.3 VOLTAGE STATUS: 3.251V Pass</span><br><span class="line">        5.0 VOLTAGE STATUS: 4.914V Pass</span><br><span class="line">        TEMPERATURE STATUS: +19.0degC Pass</span><br><span class="line"></span><br><span class="line">NEC Bootstrap Software</span><br><span class="line">Copyright (c) NEC Corporation 2001-2015. All rights reserved.</span><br><span class="line"></span><br><span class="line">%BOOT-INFO: Trying flash load, exec-image [ix2215-ms-9.1.10.ldc].</span><br><span class="line">Loading: ############################################################################### [OK]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting at 0x20000</span><br><span class="line"></span><br><span class="line">Configuring router subsystems (before IDB proc): done.</span><br><span class="line">Constructing IDB(Interface Database): done.</span><br><span class="line">Configuring router subsystems (after IDB proc): done.</span><br><span class="line">Initializing router subsystems: done.</span><br><span class="line">Starting router subsystems: done.</span><br><span class="line"></span><br><span class="line">All router subsystems coming up.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NEC Portable Internetwork Core Operating System Software</span><br><span class="line">Copyright Notices:</span><br><span class="line">Copyright (c) NEC Corporation 2001-2015. All rights reserved.</span><br><span class="line">Copyright (c) 1985-1998 OpenROUTE Networks, Inc.</span><br><span class="line">Copyright (c) 1984-1987, 1989 J. Noel Chiappa.</span><br><span class="line">Router# show version </span><br><span class="line">NEC Portable Internetwork Core Operating System Software</span><br><span class="line">IX Series IX2215 (magellan-sec) Software, Version 9.1.10, RELEASE SOFTWARE</span><br><span class="line">Compiled Feb 26-Thu-2015 10:26:18 JST #2 by sw-build, coregen-9.1(10)</span><br><span class="line"></span><br><span class="line">ROM: System Bootstrap, Version 7.2</span><br><span class="line">System Diagnostic, Version 7.2</span><br><span class="line">Initialization Program, Version 7.1</span><br><span class="line"></span><br><span class="line">System uptime is 0 minute</span><br><span class="line">System woke up by reload, caused by power-on</span><br><span class="line">System started at Jan 13-Fri-2023 20:27:25 JST</span><br><span class="line">System image file is &quot;ix2215-ms-9.1.10.ldc&quot;</span><br><span class="line"></span><br><span class="line">Processor board ID &lt;0&gt;</span><br><span class="line">IX2215 (P1010E) processor with 262144K bytes of memory.</span><br><span class="line">3 GigaEthernet/IEEE 802.3 interfaces</span><br><span class="line">1 ISDN Basic Rate interface</span><br><span class="line">1 USB interface</span><br><span class="line">1024K bytes of non-volatile configuration memory.</span><br><span class="line">32768K bytes of processor board System flash (Read/Write)</span><br></pre></td></tr></table></figure><h3 id="実際にアップデート"><a href="#実際にアップデート" class="headerlink" title="実際にアップデート"></a>実際にアップデート</h3><p>詳細は「UNIVERGE IXシリーズ　IX2000シリーズ 取扱説明書」の6-19に書かれています．<br>それではファームウェアの準備を行い，アップデートを行います．</p><h3 id="ファームウェアの準備"><a href="#ファームウェアの準備" class="headerlink" title="ファームウェアの準備"></a>ファームウェアの準備</h3><p>NECは他のメーカと違って個人でも申請をすれば最新のファームウェアを手に入れることができます．<br>書類に会社名(個人)と日付，名前を記入し捺印したファイルをメールで送信することで<br>ダウンロードサイトへのアクセスが可能になります．</p><p>現時点でのIX2215向け最新のファームウェアは<code>10.7.18</code>でした．<br>ダウンロードしたzipファイルを解凍し出てきた.rapファイルをUSBメモリのルート階層にコピーします．<br>ファイル名は<code>software-update.rap</code>にしておきます．  </p><h3 id="アップデート"><a href="#アップデート" class="headerlink" title="アップデート"></a>アップデート</h3><p>IX2215のUSB0にUSBメモリを差し込みます．<br>USBメモリが有効になっていない場合は有効にします．  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Router# configure </span><br><span class="line">Router(config)# device USB0</span><br><span class="line">Router(config-USB0)# no shutdown </span><br><span class="line">Router(config-USB0)# exit</span><br><span class="line">Router(config)# usbmem enable</span><br></pre></td></tr></table></figure><p>USB機能が有効化されたら<code>usbmem restore USB0</code>を実行しアップデートを開始します．  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Router(config)# usbmem restore USB0</span><br></pre></td></tr></table></figure><p>(USBメモリが認識される前に実行すると<code>USB memory device not found</code>と言われたので少し待ってやり直します．)</p><p>アップデートは2分程度かかりました．<br>完了すると何もなかったかのように再起動されブートログが出力されます．  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">NEC Bootstrap Software</span><br><span class="line">Copyright (c) NEC Corporation 2001-2022. All rights reserved.</span><br><span class="line"></span><br><span class="line">%BOOT-INFO: Trying flash load, exec-image [ix2215-ms-10.7.18.ldc].</span><br><span class="line">Loading: ######################################################################################################################################### [OK]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting at 0x20000</span><br><span class="line"></span><br><span class="line">Configuring router subsystems (before IDB proc): done.</span><br><span class="line">Constructing IDB(Interface Database): done.</span><br><span class="line">Configuring router subsystems (after IDB proc): done.</span><br><span class="line">Initializing router subsystems: done.</span><br><span class="line">Starting router subsystems: done.</span><br><span class="line"></span><br><span class="line">All router subsystems coming up.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line"></span><br><span class="line">WARNING! Administrative username is not configured!!</span><br><span class="line">         Action: Please configure administrative username.</span><br><span class="line"></span><br><span class="line">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NEC Portable Internetwork Core Operating System Software</span><br><span class="line">Copyright Notices:</span><br><span class="line">Copyright (c) NEC Corporation 2001-2022. All rights reserved.</span><br><span class="line">Copyright (c) 1985-1998 OpenROUTE Networks, Inc.</span><br><span class="line">Copyright (c) 1984-1987, 1989 J. Noel Chiappa.</span><br><span class="line">Router# </span><br></pre></td></tr></table></figure><p>ユーザ名が設定されていないと警告されたので適当に設定しましょう．  </p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>IX2215のファームウェアをUSBメモリ経由でアップデートする方法を試しました．<br>TFTPサーバを一時的にでも用意するのは面倒なのでとても便利でした．</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;IX2215を手に入れたのでファームウェアのアップデートを行いました．&lt;br&gt;IXシリーズのアップデートはTFTPによるアップデートが主流のようですが，&lt;br&gt;わざわざTFTPサーバを用意するのは大変なのでUSBメモリ経由でアップデートを行います．  &lt;/p&gt;</summary>
    
    
    
    
    <category term="ソフトウェア" scheme="https://blog.nullnuma.com/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2/"/>
    
    <category term="パソコン" scheme="https://blog.nullnuma.com/tags/%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>VyOS v1.3をv1.4にアップグレードしてつまづいた</title>
    <link href="https://blog.nullnuma.com/vyos-upgrade-to1-4/"/>
    <id>https://blog.nullnuma.com/vyos-upgrade-to1-4/</id>
    <published>2022-12-12T01:00:00.000Z</published>
    <updated>2022-12-12T03:02:07.136Z</updated>
    
    <content type="html"><![CDATA[<p>オープンソースのルータOSであるVyOSのバージョンを1.3から1.4に<br>アップグレードする際に2つほどエラーが発生したのでそれについて.  </p><span id="more"></span><h3 id="VyOS-のアップデート手順"><a href="#VyOS-のアップデート手順" class="headerlink" title="VyOS のアップデート手順"></a>VyOS のアップデート手順</h3><p>基本的に新しいバージョンのイメージをダウンロードして切り替えることで<br>アップグレード/ダウングレードがかんたんにできるようになっています.<br>ネットワーク機器と似た仕組みでとても便利です.  </p><p>現在のバージョンとイメージの確認.  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ show version</span><br><span class="line">Version:          VyOS 1.3-rolling-2020xxxxxxxx</span><br><span class="line">Release Train:    equuleus</span><br><span class="line"></span><br><span class="line">~ ~ ~</span><br><span class="line"></span><br><span class="line">$ show system image</span><br><span class="line">The system currently has the following image(s) installed:</span><br><span class="line"></span><br><span class="line">   1: 1.3-rolling-2020xxxxxxxx (default boot) (running image)</span><br><span class="line">   2: 1.3-rolling-2020xxxxxxxx</span><br></pre></td></tr></table></figure><p>現在のコンフィグのバックアップを一応しておきます.<br>コンフィグの出力はよくあるコンフィグファイルだけでなくコマンド設定用の出力も可能です.  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ set terminal length 0</span><br><span class="line">$ show configuration commands</span><br><span class="line">set firewall all-ping &#x27;enable&#x27;</span><br><span class="line">set firewall broadcast-ping &#x27;disable&#x27;</span><br><span class="line"></span><br><span class="line">~ ~ ~ </span><br><span class="line"></span><br><span class="line">$ configure</span><br><span class="line"># show</span><br><span class="line">  firewall &#123;</span><br><span class="line">    ~ ~</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>イメージのダウンロードをします.<br>毎日イメージがビルドされているのですが基本的な最新版の URL で追加します.<br><a href="https://vyos.net/get/nightly-builds/">VyOS nightly builds</a><br>追加時に設定を引き継ぐかなどのプロンプトが出てくるのでよしなに設定します.<br>(普通は引き継ぐと思われますが)  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ add system image https://s3-us.vyos.io/rolling/current/vyos-rolling-latest.iso</span><br><span class="line"></span><br><span class="line">~ ~ ~</span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>イメージが追加されて起動時のバージョンが変わっています.  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ show system image</span><br><span class="line">The system currently has the following image(s) installed:</span><br><span class="line"></span><br><span class="line">   1: 1.4-rolling-2022xxxxxxxx (default boot)</span><br><span class="line">   2: 1.3-rolling-2020xxxxxxxx (running image)</span><br><span class="line">   3: 1.3-rolling-2020xxxxxxxx</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>再起動すれば新しいバージョンに変わっています.  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ reboot</span><br><span class="line"></span><br><span class="line">~ ~ ~</span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><h3 id="アップグレード時に問題となった点"><a href="#アップグレード時に問題となった点" class="headerlink" title="アップグレード時に問題となった点"></a>アップグレード時に問題となった点</h3><p>以下の2点です.  </p><ul><li>zone-policyのコマンドが変わっていた</li><li>firewallの設定がエラーで反映できない</li></ul><h4 id="zone-policyのコマンドが変わっていた"><a href="#zone-policyのコマンドが変わっていた" class="headerlink" title="zone-policyのコマンドが変わっていた"></a>zone-policyのコマンドが変わっていた</h4><p>これは単純に<code>zone-policy zone &lt;name&gt;</code>から<code>firewall zone &lt;name&gt;</code>に変わりましたと<br>アナウンスがあるのでバックアップしたコンフィグをもとに書き換えるだけです.<br><a href="https://docs.vyos.io/en/latest/configuration/firewall/zone.html">Zone Based Firewall</a><br>単純に置き換えるだけで設定ができたので問題はありませんでした.  </p><h4 id="firewallの設定がエラーで反映できない"><a href="#firewallの設定がエラーで反映できない" class="headerlink" title="firewallの設定がエラーで反映できない"></a>firewallの設定がエラーで反映できない</h4><p>1つめの問題点を反映しようと,firewallのコンフィグを追加し,commitしたところ,<br>以下のエラーが出てきて変更点が反映されませんでした.<br><code>Error: No such file or directory; did you mean table ‘vyos_filter’ in family ip? delete table ip6 vyos_filter</code>  </p><p>VyOSは様々な(ソフトウェアルータ向けの)ソフトウェアの設定ラッパーとして動作しているのが基本です.<br>そこでそのエラーを出力している元のソフトウェアnftablesを直接操作し解決しました.  </p><p>VyOSが設定するときに‘vyos_filter’と呼ばれる項目をまず削除しようとすることが<br>テンプレートファイルから読み取ることができます.<br><a href="https://github.com/vyos/vyos-1x/blob/current/data/templates/firewall/nftables.j2">vyos-1x/data/templates/firewall/nftables.j2</a></p><p>なぜかそのフィルターが存在していないことが問題なのでとりあえずどうでもいいので<br>その項目を増やしてあげることで削除でのエラーがでなくなりVyOSの設定を反映する事ができるようになりました.  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nft add table vyos_filter</span><br><span class="line">$ sudo nft add table ip6 vyos_filter</span><br></pre></td></tr></table></figure><p>バージョン1.4から1.4へのアップグレード時にはこの問題は発生しなかったため,<br>1.3からという特定の状況下で発生するものと思われます.  </p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>VyOSはルータOSとして様々なソフトウェアを一括で設定する事ができるので,<br>とても便利なものではあるのですがいざ問題が起きた場合にはエラーの特定が<br>少し難しいと感じました.<br>内部でAnsibleを使用しているのでそこの理解に時間がかかりました.<br>詳しければPRなどしたいのですがそこまでの知識がないため今回は記事として残しました.  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;オープンソースのルータOSであるVyOSのバージョンを1.3から1.4に&lt;br&gt;アップグレードする際に2つほどエラーが発生したのでそれについて.  &lt;/p&gt;</summary>
    
    
    
    
    <category term="ソフトウェア" scheme="https://blog.nullnuma.com/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2/"/>
    
    <category term="パソコン" scheme="https://blog.nullnuma.com/tags/%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>デジタルノギスの分解</title>
    <link href="https://blog.nullnuma.com/disassembly-digitalcaliper/"/>
    <id>https://blog.nullnuma.com/disassembly-digitalcaliper/</id>
    <published>2022-10-31T12:59:48.000Z</published>
    <updated>2022-12-12T03:02:07.133Z</updated>
    
    <content type="html"><![CDATA[<p>ミツトヨのデジタルノギスが壊れてしまったため, 分解してみました.  </p><span id="more"></span><h3 id="全体像"><a href="#全体像" class="headerlink" title="全体像"></a>全体像</h3><p><img src="/assets/disassembly-digitalcaliper/fig1.jpg" alt="fig1"><br><img src="/assets/disassembly-digitalcaliper/fig2.jpg" alt="fig2">  </p><h3 id="内部"><a href="#内部" class="headerlink" title="内部"></a>内部</h3><p>基板はハトメを用いて固定されているためドリルで削ったのですが削りすぎてしまいました.  </p><p>ICはモールドされてしまっているので内部構造はわかりません.<br>基板は2つ入っており一番下は計測用, もう一つは計測処理と液晶表示用と推測されます.<br><img src="/assets/disassembly-digitalcaliper/fig3.jpg" alt="fig3"><br>基板間は導電ゴムを使用して接続されているようです.<br><img src="/assets/disassembly-digitalcaliper/fig4.jpg" alt="fig4"><br>計測用の基板はおそらく静電容量により計測するためのパターンが規則正しく配置されています.<br><img src="/assets/disassembly-digitalcaliper/fig5.jpg" alt="fig5"><br>左の大きいモールドが液晶表示用, 右のモールドが計測処理用ではないかと推測されます.<br>また, テストポイントが複数ありデータを書き込むのか逆に出力することが出来るのではないかと考えられます.<br><img src="/assets/disassembly-digitalcaliper/fig6.jpg" alt="fig6"><br><img src="/assets/disassembly-digitalcaliper/fig7.jpg" alt="fig7">  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ミツトヨのデジタルノギスが壊れてしまったため, 分解してみました.  &lt;/p&gt;</summary>
    
    
    
    
    <category term="分解" scheme="https://blog.nullnuma.com/tags/%E5%88%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Nested VMのkvm_buf_set_msrsエラー</title>
    <link href="https://blog.nullnuma.com/nestedvmerr-kvm-buf-set-msrs/"/>
    <id>https://blog.nullnuma.com/nestedvmerr-kvm-buf-set-msrs/</id>
    <published>2022-10-14T08:43:29.000Z</published>
    <updated>2022-12-12T03:02:07.135Z</updated>
    
    <content type="html"><![CDATA[<p>KVMでNested VMを動かそうとした際に以下のエラーを吐いて動かなかったので備忘録.  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-kvm: ../target/i386/kvm/kvm.c:2996: int kvm_buf_set_msrs(X86CPU *): Assertion `ret == cpu-&gt;kvm_msr_buf-&gt;nmsrs&#x27; failed</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h3><p>oVirtと呼ばれる仮想マシン管理ソフトウェアがどんなものか試そうとしていました.<br>実機で検証する環境が手元になかったので既にあるQEMU/KVM上でVMとして動かしました.<br>状況は以下の通り</p><p>oVirt Manager(Nested VM)<br>-———————–<br>oVirt(VM)<br>-———————–<br>Host(QEMU/KVM)</p><p>Hostで適当にVMを作っただけではoVirtのインストール時に途中で<br>oVirt Manager VMをデプロイするタイミングでエラーを吐いて終了する事態となりました.  </p><p>エラーの内容は冒頭の通りでKVMへのアクセスができていないような感じです.  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-kvm: ../target/i386/kvm/kvm.c:2996: int kvm_buf_set_msrs(X86CPU *): Assertion `ret == cpu-&gt;kvm_msr_buf-&gt;nmsrs&#x27; failed</span><br></pre></td></tr></table></figure><h3 id="原因と解決"><a href="#原因と解決" class="headerlink" title="原因と解決"></a>原因と解決</h3><p>Nested VMの設定が不完全だったのが原因でした.<br>cpuのmodeを”host-passthorugh”とすることで動くようになりました.  </p><p>単純なミスでしたが気づくまでに時間がかかってしまいました.  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;KVMでNested VMを動かそうとした際に以下のエラーを吐いて動かなかったので備忘録.  &lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;qemu-kvm: ../target/i386/kvm/kvm.c:2996: int kvm_buf_set_msrs(X86CPU *): Assertion `ret == cpu-&amp;gt;kvm_msr_buf-&amp;gt;nmsrs&amp;#x27; failed&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="パソコン" scheme="https://blog.nullnuma.com/tags/%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Arduino UnoでUSB HIDデバイスを作ってみた</title>
    <link href="https://blog.nullnuma.com/arduino-usbhid/"/>
    <id>https://blog.nullnuma.com/arduino-usbhid/</id>
    <published>2022-09-16T10:07:56.000Z</published>
    <updated>2022-12-12T03:02:07.132Z</updated>
    
    <content type="html"><![CDATA[<p>Windowsで動く音量調整や再生/一時停止デバイスを前から作りたいなと考えていたが<a href="https://github.com/drdnar/Arduino-HID-Remote">drdnar / Arduino-HID-Remote</a> をふと見つけArduinoでも簡単に実現できると知ったので試してみました. しかしこれはATMEGA32U4が搭載されているArduino限定で手元になかったのでATMEGA328Pで動くように工夫し動かしてみました.</p><span id="more"></span><h3 id="ATMEGA328Pでキーボードデバイス"><a href="#ATMEGA328Pでキーボードデバイス" class="headerlink" title="ATMEGA328Pでキーボードデバイス"></a>ATMEGA328Pでキーボードデバイス</h3><p>結構前にAVRデバイスで限定的ではあるがUSBデバイスを実現できるV-USBが話題になっていたのですがArduinoでも簡単に適用できるライブラリがあったのでありがたく使用します.  サンプルにはキーボードがありました.<br><a href="https://github.com/gloob/vusb-for-arduino">gloob / vusb-for-arduino</a></p><p>回路図は<a href="http://code.rancidbacon.com/ProjectLogArduinoUSB">Project Log : Arduino USB</a>, <a href="https://oykenkyu.blogspot.com/2021/08/vusbarduino.html">Arduino(ATmega328p)でV-USBキーボードテスト</a>を参考にしました. 手元に68Ωの抵抗がなかったため47Ωないしは100Ωで代替することができました. 面倒なのでユニバーサル基板に起こしました.  </p><p>サンプルファイルである<a href="https://github.com/gloob/vusb-for-arduino/blob/master/libraries/UsbKeyboard/examples/UsbKeyboardDemo1/UsbKeyboardDemo1.pde">UsbKeyboardDemo1.pde</a>を使用しテストしました. PlatformIOでビルドしましたが, そのままではエラーが吐かれてしまったので以下の行の宣言をcharからunsigned charに変更しました.<br><a href="https://github.com/gloob/vusb-for-arduino/blob/5e3777a3c3944b7cf7e64f2fddd574e4395e8e02/libraries/UsbKeyboard/utility/usbdrv.h#L492">libraries/UsbKeyboard/utility/usbdrv.h#L492</a><br><a href="https://github.com/gloob/vusb-for-arduino/blob/5e3777a3c3944b7cf7e64f2fddd574e4395e8e02/libraries/UsbKeyboard/UsbKeyboard.h#L43">libraries/UsbKeyboard/UsbKeyboard.h#L43</a></p><p>USBケーブルが悪いのか基板が悪いのかわかりませんがちゃんと動くまでに数時間かかってしまいました.<br>12ピンをGNDに落とすことで「hello world」が入力されるデバイスが実現できました.</p><h3 id="ATMEGA328PでHID-Consumer-デバイス"><a href="#ATMEGA328PでHID-Consumer-デバイス" class="headerlink" title="ATMEGA328PでHID(Consumer)デバイス"></a>ATMEGA328PでHID(Consumer)デバイス</h3><p>音量の調整や再生/一時停止を可能にするデバイスはConsumer Pageを設定します.<br><a href="https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf">https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf</a><br>キーボードもHIDデバイス一種であり最低限の設定は既に出来上がっているのでキーボードを実現しているGeneric DesktopからCosumerに切り替えて必要なディスクリプタを記述します. 基本的に<a href="https://github.com/drdnar/Arduino-HID-Remote/blob/fb2e330a9fb954cea7e7e63b82951a8709cd6956/HIDRemote.cpp#L3">Arduino-HID-RemoteのHIDRemote.cpp#L3</a>をコピペします. 配列のサイズが変更されるので<a href="https://github.com/gloob/vusb-for-arduino/blob/5e3777a3c3944b7cf7e64f2fddd574e4395e8e02/libraries/UsbKeyboard/usbconfig.h#L276">libraries/UsbKeyboard/usbconfig.h#L276</a>を配列サイズに変更します.  </p><p>今回はHID_REMOTE_PLAYからHID_REMOTE_MUTEを16bitで記述するのでuint16_tに変更しました. また, このディスクリプタではレポートIDを使用していることから対応したプログラムに変更する必要があります. 転送するデータの先頭にレポートIDを追加するだけで問題ありませんでした. バッファのサイズは必要に応じて変更しました.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="type">void</span> <span class="title function_">sendKeyStroke</span><span class="params">(<span class="type">uint16_t</span> key)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!usbInterruptIsReady()) &#123;</span><br><span class="line">        <span class="comment">// Note: We wait until we can send keystroke</span></span><br><span class="line">        <span class="comment">//       so we know the previous keystroke was</span></span><br><span class="line">        <span class="comment">//       sent.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(reportBuffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(reportBuffer));</span><br><span class="line"></span><br><span class="line">    reportBuffer[<span class="number">0</span>] = <span class="number">4</span>;<span class="comment">//report id</span></span><br><span class="line">    reportBuffer[<span class="number">1</span>] = key;</span><br><span class="line">    reportBuffer[<span class="number">2</span>] = (key &gt;&gt; <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    usbSetInterrupt(reportBuffer, <span class="keyword">sizeof</span>(reportBuffer));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!usbInterruptIsReady()) &#123;</span><br><span class="line">      <span class="comment">// Note: We wait until we can send keystroke</span></span><br><span class="line">      <span class="comment">//       so we know the previous keystroke was</span></span><br><span class="line">      <span class="comment">//       sent.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This stops endlessly repeating keystrokes:</span></span><br><span class="line">    <span class="built_in">memset</span>(reportBuffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(reportBuffer));</span><br><span class="line">    usbSetInterrupt(reportBuffer, <span class="keyword">sizeof</span>(reportBuffer));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//private: <span class="doctag">TODO:</span> Make friend?</span></span><br><span class="line">  uchar    reportBuffer[<span class="number">3</span>];    <span class="comment">// buffer for HID reports [ 1 modifier byte + (len-1) key strokes]</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>HID_REMOTE_PLAYやHID_REMOTE_PAUSEはアクティブなウィンドウのプレイヤー(Windows Media PlayerやiTunes)でのみ有効, HID_REMOTE_PLAY_PAUSEはバックグラウンドで再生していた場合でも有効でした. </p><h3 id="HIDレポートディスクリプタのメモ"><a href="#HIDレポートディスクリプタのメモ" class="headerlink" title="HIDレポートディスクリプタのメモ"></a>HIDレポートディスクリプタのメモ</h3><p>ディスクリプタを構築するツールが公式から提供されています.<br><a href="https://www.usb.org/document-library/hid-descriptor-tool">HID Descriptor Tool</a></p><p>色々探せば解説されていますが, REPORT_SIZE, REPORT_COUNTの理解に時間がかかりました. REPORT_SIZEはUSAGEで使用するデータのフィールドをビットごとに指定しており, REPORT_COUNTはUSAGEの数を指定しています. データは記述した順に配置されていき今回は1ビットごとなのでこれだけであれば12ビットとなっています.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0か1の設定</span></span><br><span class="line"><span class="number">0x15</span>, <span class="number">0x00</span>,                    <span class="comment">//   Logical Minimum (0)</span></span><br><span class="line"><span class="number">0x25</span>, <span class="number">0x01</span>,                    <span class="comment">//   Logical Maximum (1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf  </span></span><br><span class="line"><span class="comment">//Table 17: Consumer Usage Page を参照</span></span><br><span class="line"><span class="comment">//PlayからRandom PlayまでのUsageを一度に指定</span></span><br><span class="line"><span class="number">0x19</span>, <span class="number">0xb0</span>,                    <span class="comment">//   Usage Minimum (Play)</span></span><br><span class="line"><span class="number">0x29</span>, <span class="number">0xb9</span>,                    <span class="comment">//   Usage Maximum (Random Play)</span></span><br><span class="line"><span class="comment">//On/Offなので1ビット</span></span><br><span class="line"><span class="number">0x75</span>, <span class="number">0x01</span>,                    <span class="comment">//   Report Size (1)</span></span><br><span class="line"><span class="comment">//0xb0~0xb9まで10個あるので</span></span><br><span class="line"><span class="number">0x95</span>, <span class="number">0x0A</span>,                    <span class="comment">//   Report Count (10)</span></span><br><span class="line"><span class="number">0x81</span>, <span class="number">0x06</span>,                    <span class="comment">//   Input (Data, Variable, Relative)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//VolumeUpとDownは0xe9と0xea</span></span><br><span class="line"><span class="number">0x09</span>, <span class="number">0xe9</span>,                    <span class="comment">//   Usage (Volume Up)</span></span><br><span class="line"><span class="number">0x09</span>, <span class="number">0xea</span>,                    <span class="comment">//   Usage (Volume Down)</span></span><br><span class="line"><span class="comment">//On/Offなので1ビット</span></span><br><span class="line"><span class="number">0x75</span>, <span class="number">0x01</span>,                    <span class="comment">//   Report Size (1)</span></span><br><span class="line"><span class="comment">//VolumeUp,Downで2個</span></span><br><span class="line"><span class="number">0x95</span>, <span class="number">0x02</span>,                    <span class="comment">//   Report Count (2)</span></span><br><span class="line"><span class="number">0x81</span>, <span class="number">0x06</span>,                    <span class="comment">//   Input (Data, Variable, Relative)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Windowsで動く音量調整や再生/一時停止デバイスを前から作りたいなと考えていたが&lt;a href=&quot;https://github.com/drdnar/Arduino-HID-Remote&quot;&gt;drdnar / Arduino-HID-Remote&lt;/a&gt; をふと見つけArduinoでも簡単に実現できると知ったので試してみました. しかしこれはATMEGA32U4が搭載されているArduino限定で手元になかったのでATMEGA328Pで動くように工夫し動かしてみました.&lt;/p&gt;</summary>
    
    
    
    
    <category term="ハードウェア" scheme="https://blog.nullnuma.com/tags/%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2/"/>
    
    <category term="パソコン" scheme="https://blog.nullnuma.com/tags/%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>VAIO ドッキングステーションの分解</title>
    <link href="https://blog.nullnuma.com/disassembly-vaiodockingstation/"/>
    <id>https://blog.nullnuma.com/disassembly-vaiodockingstation/</id>
    <published>2022-09-16T08:30:00.000Z</published>
    <updated>2022-09-15T23:30:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>VAIO Zシリーズ専用のドッキングステーションであるVGP-PRZ20Aを分解してみたのでその記録です.</p><span id="more"></span><p><a href="https://www.sony.jp/vaio/products/VGP-PRZ20A/">VGP-PRZ20A/B</a></p><h3 id="主な特徴"><a href="#主な特徴" class="headerlink" title="主な特徴"></a>主な特徴</h3><p>ドッキングステーション内にメディアアクセラレータやBlu-rayドライブ, 様々なインタフェースが内蔵されており接続するだけで大幅に機能を拡張できる物となっている.  </p><p>インタフェース</p><ul><li>USB2.0 x2</li><li>USB3.0 x1</li><li>LANコネクタ 1GbE対応 x1</li><li>D-sub15 アナログ出力 x1</li><li>HDMI デジタル出力 x1</li></ul><p>この製品は対応製品のにみ接続可能でそれ以外は対応していない.</p><h3 id="外観"><a href="#外観" class="headerlink" title="外観"></a>外観</h3><p><img src="/assets/disassembly-vaiodockingstation/appearance1.jpg" alt="appearance1"><br><img src="/assets/disassembly-vaiodockingstation/appearance2.jpg" alt="appearance2"><br><img src="/assets/disassembly-vaiodockingstation/appearance3.jpg" alt="appearance3"><br><img src="/assets/disassembly-vaiodockingstation/appearance4.jpg" alt="appearance4"></p><h3 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h3><p><img src="/assets/disassembly-vaiodockingstation/inside.jpg" alt="inside"><br><img src="/assets/disassembly-vaiodockingstation/pcb.jpg" alt="pcb">  </p><p>VAIOに接続するためのUSBコネクタは特に意味がなくただただコネクタの形をしているだけである.<br>パット見た限りUSB2.0のコネクタと遜色ないが本質はコネクタ内部の普通は樹脂で固められている部分である.<br>ここに光ファイバーが通してあり光により通信している.  </p><p><img src="/assets/disassembly-vaiodockingstation/conn.jpg" alt="conn"><br><img src="/assets/disassembly-vaiodockingstation/conn_inside.jpg" alt="conn_inside"></p><p>光を入れると反対側が光っていることがわかる.<br><img src="/assets/disassembly-vaiodockingstation/fiber.jpg" alt="fiber"></p><p><img src="/assets/disassembly-vaiodockingstation/pcbup1.jpg" alt="pcbup1"><br><img src="/assets/disassembly-vaiodockingstation/pcbup2.jpg" alt="pcbup2"></p><p>光ファイバーによる送受信はこのモジュールで電気信号に変換されていると思われる.  </p><p><img src="/assets/disassembly-vaiodockingstation/pcb_front.jpg" alt="pcb_front"><br><img src="/assets/disassembly-vaiodockingstation/pcb_back.jpg" alt="pcb_back"></p><p>通信自体は型番が「CVL2510」のThnderboltコントローラ x2が担っている.<br>グラフィックアクセラレータは製品表面のラベルにもある通りAMDが使用されており型番は「216-0810001」のようである.<br>メモリはSamsungで型番は「K4W1G1646G-BC11」, gDDR3-1866 1Gbit片面x4で両面なので1GBである.<br>EthernetICは蟹でおなじみRealtekで型番は「RTL8111E」<br>Blu-rayドライブ用のSATAドライバはMarvellで型番は「88SE6121」<br>クロック生成ICはRenesasで型番は「ICS9LPRS365BKL」<br>USB3.0コントローラはRenesas(旧NEC?)でマーキングは「D720200AF1」型番はおそらく「μPD720200」<br>USB2.0ハブコントローラはNECで「μPD720114」</p><p>Blu-rayドライブはスリムなタイプが内蔵されており型番は「BD-5840H」となっている.<br>インターフェイスはSlimSATAで変換器を噛まして別のPCで使うことができた.</p><p><img src="/assets/disassembly-vaiodockingstation/bddrive.jpg" alt="bddrive"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;VAIO Zシリーズ専用のドッキングステーションであるVGP-PRZ20Aを分解してみたのでその記録です.&lt;/p&gt;</summary>
    
    
    
    
    <category term="分解" scheme="https://blog.nullnuma.com/tags/%E5%88%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>SEL2870レンズの分解修理</title>
    <link href="https://blog.nullnuma.com/lens-sel2870-repair/"/>
    <id>https://blog.nullnuma.com/lens-sel2870-repair/</id>
    <published>2022-07-21T07:56:37.000Z</published>
    <updated>2022-07-21T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>SONYのレンズSEL2870を壊してしまいました.<br>清掃が原因と思われるのですが気づいたらレンズのうち後玉が鏡筒内部に落ちてしまっていて<br>焦点距離を変えようにもつっかえた状態になり撮影など何もできる状況ではなくなりました.<br>そこで落下したレンズを適切な位置に戻し固定する修理を行いました.  </p><span id="more"></span><h3 id="SEL2870が壊れた"><a href="#SEL2870が壊れた" class="headerlink" title="SEL2870が壊れた"></a>SEL2870が壊れた</h3><p>SONYのレンズでもキットレンズや入門向けとしてよく購入されているレンズです.  </p><iframe sandbox="allow-popups allow-scripts allow-modals allow-forms allow-same-origin" style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=nullnuma0d-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B00FYOFADE&linkId=866a9a52bbd1e9d1aaf2c18862b40f6b"></iframe><p>レンズ枚数は9枚ですが一番イメージセンサ側に位置する後玉のレンズが落下しています.<br>分かりづらいのですが矢印部分に存在しなければいけないレンズがありません.<br><img src="/assets/lens-sel2870-repair/broken.jpg" alt="壊れた状態"></p><p>保証もなにもないので自分でどうにか直します.  </p><h3 id="修理"><a href="#修理" class="headerlink" title="修理"></a>修理</h3><p>※写真の撮影の都合上組み立てるときに撮ったのでレンズは既に直った状態で撮影しています.  </p><p>まずはマウント部を外します.<br>4箇所のネジを外せばマウント部は簡単に外れますが電子接点用のケーブルが<br>基板と接続されているのでコネクタのロックを解除し慎重に外します.<br><img src="/assets/lens-sel2870-repair/repair_00001.jpg" alt="マウント部"><br><img src="/assets/lens-sel2870-repair/repair_00002.jpg" alt="マウント部外した後"></p><p>ケーブルを取り外します.<br>赤色は電子接点用で既に外してありますが, 緑色はロック付き, 青色はロックなしです.<br>青色は引っ張るしか無いので慎重に外します.<br><img src="/assets/lens-sel2870-repair/repair_00003.jpg" alt="repair_00003"></p><p>外した基板表裏<br>(どっちが表なんだろうか)<br><img src="/assets/lens-sel2870-repair/repair_00004.jpg" alt="基板表?"><br><img src="/assets/lens-sel2870-repair/repair_00005.jpg" alt="基板裏?"></p><p>更に分解していきます.<br>緑色は外側のカバー, 赤色は内部の鏡筒の固定となっていました.<br><img src="/assets/lens-sel2870-repair/repair_00006.jpg" alt="カバーを外す"></p><p>外側の焦点距離を合わせるための筒と鏡筒を固定するための金属部品を外します.<br><img src="/assets/lens-sel2870-repair/repair_00008.jpg" alt="鏡筒の固定"><br>溝に金属部分が嵌合し外側と連動しているようです.<br><img src="/assets/lens-sel2870-repair/repair_00009.jpg" alt="固定部分"></p><p>その後は外側の筒を揺さぶったり回していると外れます.<br><img src="/assets/lens-sel2870-repair/repair_00010.jpg" alt="外側の筒を外す"></p><p>鏡筒を取り外すために可変抵抗器を外します.<br>これは焦点距離を内部で把握するための可変抵抗器だと思われます.<br><img src="/assets/lens-sel2870-repair/repair_00011.jpg" alt="鏡筒の分離"><br>裏側から見た可変抵抗器<br><img src="/assets/lens-sel2870-repair/repair_00012.jpg" alt="裏側から見た可変抵抗器"></p><p>ここまで来ると鏡筒は簡単に外れます.<br><img src="/assets/lens-sel2870-repair/repair_00013.jpg" alt="repair_00013"></p><p>最後後玉のマウントしているパーツを外します.<br><img src="/assets/lens-sel2870-repair/repair_00014.jpg" alt="repair_00014"></p><p>これが諸悪の根源(?)です.<br><img src="/assets/lens-sel2870-repair/repair_00015.jpg" alt="撮影側から"><br><img src="/assets/lens-sel2870-repair/repair_00016.jpg" alt="イメージセンサ側から"></p><p>今回のメインが外せたので修理します.<br>パット見た感じでは接着剤等で固定されておらず<br>矢印部分にレンズを嵌めることで固定されているようでした.<br>下手に力かけたら落ちますね.<br>一度落ちてしまった以上単純に嵌めただけでは固定が甘いので接着剤を使います.<br>爪楊枝を使って4箇所に接着剤を少し塗りレンズを嵌め込みます.<br><img src="/assets/lens-sel2870-repair/repair_00017.jpg" alt="repair_00017"><br>接着剤はコニシのウルトラ多用途S・U プレミアムハードを使いました.  </p><iframe sandbox="allow-popups allow-scripts allow-modals allow-forms allow-same-origin" style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=nullnuma0d-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B005SO77DG&linkId=9fbe4c4b5e0c4eb4a06bdc1fca5011c8"></iframe><p>少し多かったようでほんの少しだけはみ出てしまいました…<br>(写真を撮って確認したところ影響はなかったっぽいですが)</p><p>固定が確認できたら逆の順番で組み立てていきます.<br>ケーブルを差し込むところが一番厄介な気がしますが<br>非破壊で分解しているので特に問題なく組み立てることができました.  </p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>SEL2870の分解と後玉の修理を行いました.<br>分解自体は手順がわかれば簡単ですが初見で行うのは難しく<br>壊してしまうのではないかと不安でした.<br>結果としては問題なく組み上げられて撮影にも問題なかったので良かったです.<br>結局の所壊さないが一番です…!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SONYのレンズSEL2870を壊してしまいました.&lt;br&gt;清掃が原因と思われるのですが気づいたらレンズのうち後玉が鏡筒内部に落ちてしまっていて&lt;br&gt;焦点距離を変えようにもつっかえた状態になり撮影など何もできる状況ではなくなりました.&lt;br&gt;そこで落下したレンズを適切な位置に戻し固定する修理を行いました.  &lt;/p&gt;</summary>
    
    
    
    
    <category term="分解" scheme="https://blog.nullnuma.com/tags/%E5%88%86%E8%A7%A3/"/>
    
    <category term="修理" scheme="https://blog.nullnuma.com/tags/%E4%BF%AE%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>NFSのエラー &quot;Lock reclaim failed!&quot;</title>
    <link href="https://blog.nullnuma.com/nfs-hostname/"/>
    <id>https://blog.nullnuma.com/nfs-hostname/</id>
    <published>2022-06-10T09:16:31.000Z</published>
    <updated>2022-12-12T03:02:07.135Z</updated>
    
    <content type="html"><![CDATA[<p>研究で使用している共有ストレージ用のNFSにうまく接続できない問題がありました.<br>再度ハマったときの備忘録としてメモ.</p><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>カーネルログに以下のログが出現し共有ストレージにアクセスできない.  </p><blockquote><p>NFS: __nfs4_reclaim_open_state: Lock reclaim failed!</p></blockquote><span id="more"></span><h3 id="状況"><a href="#状況" class="headerlink" title="状況"></a>状況</h3><p>ゲストOS内でNFS経由で共有ストレージに接続しているVMとそのストレージ自体を複製した.<br>そうすると内部のデータは同じなのでMACアドレスやIPアドレスが重複したVMができてしまう.<br>流石にそれはわかっていたので変更した.  </p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>MACアドレスやIPアドレスだけでなくホストネームも変更する必要があった.  </p><h3 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h3><p>OSのホストネームを変更する.  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;研究で使用している共有ストレージ用のNFSにうまく接続できない問題がありました.&lt;br&gt;再度ハマったときの備忘録としてメモ.&lt;/p&gt;
&lt;h3 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h3&gt;&lt;p&gt;カーネルログに以下のログが出現し共有ストレージにアクセスできない.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NFS: __nfs4_reclaim_open_state: Lock reclaim failed!&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="ソフトウェア" scheme="https://blog.nullnuma.com/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2/"/>
    
    <category term="パソコン" scheme="https://blog.nullnuma.com/tags/%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 8 から CentOS Stream 8 へ移行した</title>
    <link href="https://blog.nullnuma.com/migratecentos8tostream8/"/>
    <id>https://blog.nullnuma.com/migratecentos8tostream8/</id>
    <published>2022-02-03T00:42:54.000Z</published>
    <updated>2022-12-12T03:02:07.135Z</updated>
    
    <content type="html"><![CDATA[<p>前々からCentOS8はサポートを終了するという話は知っていたのですが<br>CentOS Stream 8へ移行するのをすっかり忘れていて<br>簡単に移行できなかったので備忘録</p><span id="more"></span><h3 id="アップデートすらできない"><a href="#アップデートすらできない" class="headerlink" title="アップデートすらできない"></a>アップデートすらできない</h3><p>昨年末でサポートが終了してしまいそのままではアップデートすらできない状況になっていました．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf update</span><br><span class="line">Error: Failed to download metadata <span class="keyword">for</span> repo <span class="string">&#x27;AppStream&#x27;</span>: Cannot prepare internal mirrorlist: No URLs <span class="keyword">in</span> mirrorlist</span><br></pre></td></tr></table></figure><p><a href="https://www.centos.org/centos-stream/">公式サイト</a>によると<br>以下のコマンドで移行することができるということですが前述の通り，リポジトリが無効なので<br>エラーを吐いて終了していまします．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf --disablerepo <span class="string">&#x27;*&#x27;</span> --enablerepo extras swap centos-linux-repos centos-stream-repos</span><br><span class="line">$ sudo dnf distro-sync</span><br></pre></td></tr></table></figure><h3 id="リポジトリの変更"><a href="#リポジトリの変更" class="headerlink" title="リポジトリの変更"></a>リポジトリの変更</h3><p>このままではどうしようもないのでとりあえずリポジトリを古いスナップショットに切り替えてその場をしのぎます．<br>私の環境のバージョンは8.2.2004なのでそれに合わせて設定します．<br>(古いですね…)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line">CentOS Linux release 8.2.2004 (Core)</span><br></pre></td></tr></table></figure><p>編集するファイルは以下の3つです．</p><ul><li>/etc/yum.repos.d/CentOS-AppStream.repo</li><li>/etc/yum.repos.d/CentOS-Base.repo</li><li>/etc/yum.repos.d/CentOS-Extras.repo</li></ul><p>CentOS-AppStream.repoは以下のような内容ですが，mirrorlistをコメントアウトし別途baseurlを足します．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS-AppStream.repo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The mirror system uses the connecting IP address of the client and the</span></span><br><span class="line"><span class="comment"># update status of each mirror to pick mirrors that are updated to and</span></span><br><span class="line"><span class="comment"># geographically close to the client.  You should use this for CentOS updates</span></span><br><span class="line"><span class="comment"># unless you are manually picking other mirrors.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the mirrorlist= does not work for you, as a fall back you can try the</span></span><br><span class="line"><span class="comment"># remarked out baseurl= line instead.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">[AppStream]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - AppStream</span><br><span class="line">mirrorlist=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;<span class="built_in">arch</span>=<span class="variable">$basearch</span>&amp;repo=AppStream&amp;infra=<span class="variable">$infra</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/$contentdir/$releasever/AppStream/$basearch/os/</span></span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br></pre></td></tr></table></figure><p>スナップショットは <a href="https://vault.centos.org/">https://vault.centos.org/</a> のサイトにあるのでドメイン名を切り替えてバージョンも適切な値に切り替えます．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[AppStream]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - AppStream</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=AppStream&amp;infra=$infra</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/$contentdir/$releasever/AppStream/$basearch/os/</span></span><br><span class="line">baseurl=http://vault.centos.org/<span class="variable">$contentdir</span>/8.2.2004/AppStream/<span class="variable">$basearch</span>/os/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br></pre></td></tr></table></figure><p>それを他のCentOS-Base.repoとCentOS-Extras.repoにも適用します．<br>これでリポジトリの変更は完了です．</p><h3 id="それではアップデート"><a href="#それではアップデート" class="headerlink" title="それではアップデート"></a>それではアップデート</h3><p>一応クリアしておいて，あとはアップデートをかけて前述のコマンドを実行することで CentOS Stream 8 へ移行は完了するはずです．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf clean all</span><br><span class="line">$ sudo dnf -y update</span><br><span class="line">$ sudo dnf --disablerepo <span class="string">&#x27;*&#x27;</span> --enablerepo extras swap centos-linux-repos centos-stream-repos</span><br><span class="line">$ sudo dnf distro-sync</span><br></pre></td></tr></table></figure><p>しかしうまく動いてくれなかったので<a href="https://manual.sakura.ad.jp/cloud/support/technical/centos8-to-centosstream8.html">CentOS8からCentOS Stream8への移行手順</a>を参考にアップデートしました．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf -y install centos-release-stream</span><br><span class="line">$ sudo dnf -y swap centos-&#123;linux,stream&#125;-repos</span><br><span class="line">$ sudo dnf -y distro-sync</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line">CentOS Stream release 8</span><br></pre></td></tr></table></figure><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>事前に移行しておかないと手順が増えて面倒であることを理解しました…<br>リポジトリの変更をすることで旧来のバージョンでも使用することはできるので<br>うまく使い移行することができました．</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前々からCentOS8はサポートを終了するという話は知っていたのですが&lt;br&gt;CentOS Stream 8へ移行するのをすっかり忘れていて&lt;br&gt;簡単に移行できなかったので備忘録&lt;/p&gt;</summary>
    
    
    
    
    <category term="ソフトウェア" scheme="https://blog.nullnuma.com/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2/"/>
    
    <category term="パソコン" scheme="https://blog.nullnuma.com/tags/%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>VOXYの車幅灯を交換した ZRR70W</title>
    <link href="https://blog.nullnuma.com/voxy-width-indicator/"/>
    <id>https://blog.nullnuma.com/voxy-width-indicator/</id>
    <published>2021-06-29T09:47:30.000Z</published>
    <updated>2021-06-29T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>VOXYの左側の車幅灯が切れていることがわかったので交換しました．</p><p>型はZRR70Wです．</p><span id="more"></span><h3 id="交換"><a href="#交換" class="headerlink" title="交換"></a>交換</h3><p>電球自体はよくあるT10タイプの5Wです．</p><p>ボンネットを開けて左側のコネクタを探します．<br>一番上なのでとてもわかりやすいです．<br><img src="/assets/voxy-width-indicator/conn.jpg" alt="conn"></p><p>これを奥側に回してあげることでコネクタごと外れます．<br><img src="/assets/voxy-width-indicator/remove.jpg" alt="remove"></p><p>外れたコネクタから電球を取り交換してあげればok．<br><img src="/assets/voxy-width-indicator/bulb.jpg" alt="bulb">  </p><p>逆の手順で戻して完了です．<br><img src="/assets/voxy-width-indicator/result.jpg" alt="result"></p><p>後ろの後尾灯の交換とは比にならないぐらい簡単に終わりました!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;VOXYの左側の車幅灯が切れていることがわかったので交換しました．&lt;/p&gt;
&lt;p&gt;型はZRR70Wです．&lt;/p&gt;</summary>
    
    
    
    
    <category term="自動車" scheme="https://blog.nullnuma.com/tags/%E8%87%AA%E5%8B%95%E8%BB%8A/"/>
    
  </entry>
  
  <entry>
    <title>UrJTAGでバウンダリスキャン</title>
    <link href="https://blog.nullnuma.com/urjtag-prepare/"/>
    <id>https://blog.nullnuma.com/urjtag-prepare/</id>
    <published>2021-06-16T11:00:00.000Z</published>
    <updated>2022-12-12T03:02:07.136Z</updated>
    
    <content type="html"><![CDATA[<p>FPGAボードのデバッグをするにあたりバウンダリスキャンが使えそうという話を聞いたので試してみました．<br>今回はRaspberry Pi上に環境を構築します．</p><span id="more"></span><h3 id="JTAGとバウンダリスキャン"><a href="#JTAGとバウンダリスキャン" class="headerlink" title="JTAGとバウンダリスキャン"></a>JTAGとバウンダリスキャン</h3><p>JTAGはICや基板のテスト用に定められた規格であり，今日のFPGAでは書き込みやデバッグ等に便利なものとなっています．<br>テストを行うためにICの内部状態を読み出すことをバウンダリスキャンテストと呼ばれるようで，これを活用することでICのピンの状態を読み出すことが出来ます．</p><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><p><a href="https://lynxeyed.hatenablog.com/entry/2017/08/25/103131">Raspberry Pi 3でUrJTAGを使う</a>と<a href="https://bluefish.orz.hm/sdoc/jtag_memo.html">JTAGでバウンダリスキャンしてみよう</a>を参考にしました．(2021/06/16)</p><p>Raspberry Pi 2にRaspbianをインストールした状態でスタートします．<br>最低限必要なものをインストール</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install autoconf autopoint libtool libreadline-dev python-dev libusb-dev libusb-1.0-0-dev flex libftdi-dev bison git -y</span><br></pre></td></tr></table></figure><p>次にJTAGデバイスを触るためにFTDIのドライバを入れます．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://www.ftdichip.com/Drivers/D2XX/Linux/libftd2xx-arm-v7-hf-1.4.24.gz</span><br><span class="line">tar xvf libftd2xx-arm-v7-hf-1.4.24.gz</span><br><span class="line"><span class="built_in">cd</span> release/build</span><br><span class="line">sudo <span class="built_in">cp</span> libftd2xx.* /usr/local/lib</span><br><span class="line">sudo <span class="built_in">chmod</span> 0755 /usr/local/lib/libftd2xx.so.1.4.24</span><br><span class="line">sudo <span class="built_in">ln</span> -sf /usr/local/lib/libftd2xx.so.1.4.24 /usr/local/lib/libftd2xx.so</span><br><span class="line"><span class="built_in">cd</span> ../examples</span><br><span class="line">sudo <span class="built_in">cp</span> ftd2xx.h /usr/include/</span><br><span class="line">sudo <span class="built_in">cp</span> WinTypes.h /usr/include/</span><br></pre></td></tr></table></figure><p>UrJTAGをビルドしてインストールします．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line">sudo apt install python3-distutils python3-dev -y</span><br><span class="line">git <span class="built_in">clone</span> git://git.code.sf.net/p/urjtag/git urjtag-git</span><br><span class="line"><span class="built_in">cd</span> urjtag-git/urjtag/</span><br><span class="line">./autogen.sh</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>これでjtagコマンドが使えるようになりました．</p><h3 id="Digilent-HS2を使う"><a href="#Digilent-HS2を使う" class="headerlink" title="Digilent HS2を使う"></a>Digilent HS2を使う</h3><p>今回使用するJTAGデバイスはDigilent社のHS2なのですが，初期状態ではHS1にしか対応していないことが判明しました．<br>そこで先人の知恵をお借りしてパッチを適用してHS2を使えるようにします．<br><a href="http://decuntil.blogspot.com/2020/09/urjtag-digilent-hs2-xc7a200t.html">xc7a200t &amp; Digilent HS2 &amp; urjtag &amp; Vivado 2020.1</a><br><a href="https://sourceforge.net/p/urjtag/mailman/message/35914143/">Universal JTAG library, server and tools / Re: [UrJTAG-dev] Digilent FT2232 based boards revisited</a><br>パッチの内容を適用し以下のファイルにHS2の処理を追加しました．</p><ul><li>src/tap/cable/ft2232.c</li><li>src/tap/cable/generic_usbconn_list.h</li><li>src/tap/cable_list.h</li></ul><p>再度ビルドしてインストール</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> urjtag-git/urjtag/</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>これでHS2も使えるUrJTAGになりました　．</p><h3 id="UrJTAGを使う"><a href="#UrJTAGを使う" class="headerlink" title="UrJTAGを使う"></a>UrJTAGを使う</h3><p>UrJTAGは対話式のツールとなっているのでjtagコマンドを叩きます．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo jtag</span><br></pre></td></tr></table></figure><h4 id="ケーブルの検出と選択"><a href="#ケーブルの検出と選択" class="headerlink" title="ケーブルの検出と選択"></a>ケーブルの検出と選択</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jtag&gt; cable probe</span><br><span class="line">Found USB cable: DigilentHS2</span><br><span class="line">Connected to libftd2xx driver.</span><br><span class="line">jtag&gt; </span><br></pre></td></tr></table></figure><h4 id="FPGAの検出"><a href="#FPGAの検出" class="headerlink" title="FPGAの検出"></a>FPGAの検出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jtag&gt; detect</span><br><span class="line">IR length: 6</span><br><span class="line">Chain length: 1</span><br><span class="line">Device Id: 00000011011000101101000010010011 (0x0362D093)</span><br><span class="line">  Manufacturer: Xilinx (0x093)</span><br><span class="line">  Part(0):      xc7a35t (0x362D)</span><br><span class="line">error: Unable to open file <span class="string">&#x27;/usr/local/share/urjtag/xilinx/xc7a35t/STEPPINGS&#x27;</span></span><br><span class="line">  Unknown stepping! (0000) (/usr/local/share/urjtag/xilinx/xc7a35t/STEPPINGS)</span><br><span class="line">jtag&gt; </span><br></pre></td></tr></table></figure><p>接続しているFPGAはArtix7 XC7A35T-FTG256なのですがこのFPGAについての情報が登録されていないのでエラーが出てしまいました．</p><h3 id="FPGAの登録"><a href="#FPGAの登録" class="headerlink" title="FPGAの登録"></a>FPGAの登録</h3><p>IC内部の情報がまとめられているBSDLファイルというものがあります．<br>これはメーカーが提供するもので必要なファイルをダウンロードしてきます．<br><a href="https://japan.xilinx.com/support/download/index.html/content/xilinx/ja/downloadNav/device-models/bsdl-models/artix-series-fpgas.html">Xilinx Artix7のBSDLファイル</a>  </p><p>Raspberry Piに転送して解凍します．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip bsdl_artix7_3.zip</span><br><span class="line"><span class="built_in">cd</span> artix7/public/bsdl/</span><br></pre></td></tr></table></figure><p>今回の対象ファイルは”xc7a35t_ftg256.bsd”です．</p><p>UrJTAGが読める形式に変換する必要があり変換ツールとしてbsdl2jtagがあります．  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ bsdl2jtag xc7a35t_ftg256.bsd xc7a35t_ftg256</span><br><span class="line">error: -E- error: In Package STD_1149_6_2003, Line 2, Error <span class="keyword">in</span> User-Defined Package declarations.</span><br><span class="line">error: -E- error: BSDL file <span class="string">&#x27;xc7a35t_ftg256.bsd&#x27;</span> contains errors <span class="keyword">in</span> VHDL stage, stopping</span><br><span class="line">error: vhdl subsystem: Parser error, see <span class="built_in">log</span> <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><p>しかしSTD_1149_6_2003パッケージが登録されていないというエラーが出てしまいます．<br>エラー出る部分を削ってしまえという回答があったので従います．<br>(Universal JTAG library, server and tools / Discussion / Using UrJTAG: How to convert bsd file to jtag file for xc7k325t_fbg676)[<a href="https://sourceforge.net/p/urjtag/discussion/682993/thread/d7eaecd13a/]">https://sourceforge.net/p/urjtag/discussion/682993/thread/d7eaecd13a/]</a>  </p><p>今回は以下の2箇所を削りました．  </p><ul><li>L322: use STD_1149_6_2003.all;</li><li>L1485-1492: attribute AIO_COMPONENT_CONFORMANCE of XC7A35T_FTG256 : entity is</li></ul><p>問題なく変換され”xc7a35t_ftg256”ファイルが生成されました．<br>このファイルを登録していきます．<br>ライブラリは/usr/local/share/urjtag以下に存在します．<br>xc7a35tのディレクトリがなかったので作成しコピーします．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /usr/local/share/urjtag/xilinx/xc7a35t</span><br><span class="line">sudo <span class="built_in">mv</span> xc7a35t_ftg256 /usr/local/share/urjtag/xilinx/xc7a35t</span><br></pre></td></tr></table></figure><p>このままでは認識されないのでxc7a35tの中でもftg256はここだよという登録を行います．<br>“/usr/local/share/urjtag/xilinx/xc7a35t/STEPPINGS”というファイルを生成します．<br>先程detectした結果得られた”Unknown stepping! (0000)”の0000(これはバージョンらしい)を使用します．<br>以下の書式に従い作成します<br>&lt;バージョン&gt; &lt;表示名&gt; &lt;バージョンの表示名&gt;</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 xc7a35t_ftg256 0</span><br></pre></td></tr></table></figure><p>ここまで行えば登録は完了です．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jtag&gt; detect</span><br><span class="line">IR length: 6</span><br><span class="line">Chain length: 1</span><br><span class="line">Device Id: 00000011011000101101000010010011 (0x0362D093)</span><br><span class="line">  Manufacturer: Xilinx (0x093)</span><br><span class="line">  Part(0):      xc7a35t (0x362D)</span><br><span class="line">  Stepping:     0</span><br><span class="line">  Filename:     /usr/local/share/urjtag/xilinx/xc7a35t/xc7a35t_ftg256</span><br><span class="line">jtag&gt; </span><br></pre></td></tr></table></figure><p>ちゃんと検出されました．</p><h4 id="IDCODEを出力"><a href="#IDCODEを出力" class="headerlink" title="IDCODEを出力"></a>IDCODEを出力</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jtag&gt; instruction IDCODE</span><br><span class="line">jtag&gt; <span class="built_in">shift</span> ir</span><br><span class="line">jtag&gt; <span class="built_in">shift</span> dr</span><br><span class="line">jtag&gt; dr</span><br><span class="line">00000011011000101101000010010011 (0x0362D093)</span><br><span class="line">jtag&gt; </span><br></pre></td></tr></table></figure><h4 id="ポートの状態を取得"><a href="#ポートの状態を取得" class="headerlink" title="ポートの状態を取得"></a>ポートの状態を取得</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jtag&gt; instruction SAMPLE/PRELOAD</span><br><span class="line">jtag&gt; <span class="built_in">shift</span> ir</span><br><span class="line">jtag&gt; <span class="built_in">shift</span> dr</span><br><span class="line">jtag&gt; dr</span><br><span class="linex0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFC5CE)</span><br><span class="line">jtag&gt; </span><br></pre></td></tr></table></figure><p>よくわかりませんが値が得られました!<br>詳細はbsdlファイル内の”attribute BOUNDARY_REGISTER of XC7A35T_FTG256”エンティティに書いてあるようです．  </p><p>パーサーなどを作らないと手動じゃ無理そうですね…</p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>デバイスの登録を行い，UrJTAGで検出し実際にバウンダリスキャンを行うことができました．<br>またまだわからないことだらけなのでぼちぼち試していこうと思います．</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;FPGAボードのデバッグをするにあたりバウンダリスキャンが使えそうという話を聞いたので試してみました．&lt;br&gt;今回はRaspberry Pi上に環境を構築します．&lt;/p&gt;</summary>
    
    
    
    
    <category term="ハードウェア" scheme="https://blog.nullnuma.com/tags/%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2/"/>
    
    <category term="FPGA" scheme="https://blog.nullnuma.com/tags/FPGA/"/>
    
  </entry>
  
  <entry>
    <title>DIGAを修理した</title>
    <link href="https://blog.nullnuma.com/repair-diga/"/>
    <id>https://blog.nullnuma.com/repair-diga/</id>
    <published>2021-03-02T11:02:19.000Z</published>
    <updated>2021-03-02T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>朝起きたらHDDレコーダのDIGAが息をしていなかったので修理を試みました  </p><p>HDDレコーダは2008年製で相当古いのでそろそろ壊れるのはわかっていたのですが<br>ついにその時が!…</p><span id="more"></span><h3 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h3><p>機種はDMR-BR500でHDDレコーダとしても初期の頃の代物です．<br>前面パネルの表示機に “PLEASE” が表示されるとすぐに消え，また表示するという繰り返しでした．<br><img src="/assets/repair-diga/diga_failure.jpg" alt="DIGA 故障"></p><h3 id="故障箇所の特定"><a href="#故障箇所の特定" class="headerlink" title="故障箇所の特定"></a>故障箇所の特定</h3><p>何はともあれ分解します．<br>一番可能性が高く修理しようがないHDDですがスピンアップしては落ちる音を出していました．<br>とりあえずパソコンに繋いでみたところ普通に立ち上がったので壊れた可能性は低いと推測しました．  </p><p>ということで基板を探ったところコンデンサが膨れていたので犯人はこいつですね．<br>コンデンサは16V 120μF 105度品でした．<br><img src="/assets/repair-diga/repair_before.jpg" alt="repair_before"></p><h3 id="修理"><a href="#修理" class="headerlink" title="修理"></a>修理</h3><p>家の在庫コンデンサは近いもので16V 100μF 105度品か35V 470μF 85度品の2つです．<br>多少小さくても問題ないだろうということで前者に交換します．<br><img src="/assets/repair-diga/repair_after.jpg" alt="repair_after"></p><p>その後組み立て直して問題なく動作確認できました．</p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>“PLEASE” の点滅表示は電源が故障し，起動する前に電源が断たれることによる影響ということがわかりました．<br>電源としてはよくあるコンデンサの故障なので交換するだけでなんとかなりました．<br>そろそろ新しい機種を買わないとかな?…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;朝起きたらHDDレコーダのDIGAが息をしていなかったので修理を試みました  &lt;/p&gt;
&lt;p&gt;HDDレコーダは2008年製で相当古いのでそろそろ壊れるのはわかっていたのですが&lt;br&gt;ついにその時が!…&lt;/p&gt;</summary>
    
    
    
    
    <category term="ハードウェア" scheme="https://blog.nullnuma.com/tags/%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2/"/>
    
  </entry>
  
  <entry>
    <title>Cloud Edgeにシリアルコンソールでインストール</title>
    <link href="https://blog.nullnuma.com/cloudedge-install/"/>
    <id>https://blog.nullnuma.com/cloudedge-install/</id>
    <published>2021-01-21T00:00:00.000Z</published>
    <updated>2022-12-12T03:02:07.133Z</updated>
    
    <content type="html"><![CDATA[<p>DNSやDHCPを動かす用のマシンが欲しくなりそこまでスペックはいらないけど<br>安定稼働しそうなPCを探していたらトレンドマイクロ社が出しているCloud Edgeがいい<br>という話を聞いたので試してみました．</p><span id="more"></span><h3 id="購入"><a href="#購入" class="headerlink" title="購入"></a>購入</h3><p>既に<a href="https://v2n.hatenablog.com/entry/2019/12/20/151246">情報</a>が出ているので参考にしてヤフオクでCloud Edge 100を落としました</p><p><img src="/assets/cloudedge-install/front.jpg" alt="front"></p><p>Cloud Edgeは中身はAMDのCPUが載っていて極一般的なx64マシンですが<br>UTMでライセンスがないとまともな動作をしないので全部消し去りLinuxを入れます</p><h3 id="スペック"><a href="#スペック" class="headerlink" title="スペック"></a>スペック</h3><p>Cloud Edge 100のスペックは以下の通り</p><table><thead><tr><th align="left">項目</th><th align="left">値</th></tr></thead><tbody><tr><td align="left">CPU</td><td align="left">AMD GX-416RA (4コア 1.6GHz)</td></tr><tr><td align="left">メモリ</td><td align="left">4GB</td></tr><tr><td align="left">SSD</td><td align="left">Transend 32GB</td></tr><tr><td align="left">シリアルコンソール</td><td align="left">baudrate 115200</td></tr><tr><td align="left">電源</td><td align="left">外径5.5mm 内径2.5mm 12V5A</td></tr></tbody></table><h3 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h3><p>とりあえず分解しないと面白くないので分解しました．<br><img src="/assets/cloudedge-install/voidseal.jpg" alt="voidseal"><br><img src="/assets/cloudedge-install/top.jpg" alt="top"><br><img src="/assets/cloudedge-install/back.jpg" alt="back"><br><img src="/assets/cloudedge-install/bottom.jpg" alt="bottom"></p><p>メモリは背が低いタイプでした．</p><h3 id="ファンの交換"><a href="#ファンの交換" class="headerlink" title="ファンの交換"></a>ファンの交換</h3><p>標準ファンだととてもうるさいので静音ファンに交換します．<br><img src="/assets/cloudedge-install/fan.jpg" alt="fan"><br><img src="/assets/cloudedge-install/fan_install.jpg" alt="fan_install"></p><p>これで常用できるレベルまで下がりました．</p><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><p>映像出力がなくシリアルコンソールでしか叩くことが出来ないため<br>なんとかしてシリアルコンソール経由でインストールを行いました．</p><p>LinuxのディストリビューションはシンプルそうなAlpine Linuxにします．</p><h4 id="Live-USBの作成"><a href="#Live-USBの作成" class="headerlink" title="Live USBの作成"></a>Live USBの作成</h4><p><a href="https://alpinelinux.org/">Alpine Linux 公式サイト</a>からisoファイルをダウンロード．<br>いつもだとddコマンドで書き込むのですがシリアルコンソール経由のインストールを<br>実現するためにファイルを書き換える必要があるため<br><a href="https://rufus.ie/">Windowsのソフト Rufus</a>を使います．<br>(LinuxでいろいろLive USB作成を試したのですがうまく行かなかったのでソフトに丸投げ!)</p><p>初期設定でisoファイルを指定して4GBのUSBメモリに書き込みました．<br>Alpine Linuxは軽いのですぐ終わりますね．<br>そのあとシリアルコンソールで出力されるようにコマンドを書き換えます．  </p><p>USBメモリ内の”boot/syslinux/syslinux.cfg”ファイルのうち<br>先頭にSERIALを追加，APPENDを以下の通りに書き換えます．</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SERIAL 0 115200</span><br><span class="line"></span><br><span class="line">TIMEOUT 20</span><br><span class="line">PROMPT 1</span><br><span class="line">DEFAULT lts</span><br><span class="line"></span><br><span class="line">LABEL lts</span><br><span class="line">MENU LABEL Linux lts</span><br><span class="line">KERNEL /boot/vmlinuz-lts</span><br><span class="line">INITRD /boot/initramfs-lts</span><br><span class="line">FDTDIR /boot/dtbs-lts</span><br><span class="line">APPEND modules=loop,squashfs,sd-mod,usb-storage console=tty0 console=ttyS0,115200n8 </span><br></pre></td></tr></table></figure><p>こうすることで出力がシリアルコンソールに継続して出力されます．<br>Live USBが完成です．</p><h4 id="インストール作業"><a href="#インストール作業" class="headerlink" title="インストール作業"></a>インストール作業</h4><p>USBポートに差し込んで起動すれば勝手に起動します．<br>起動すれば後はsetup-alpineを叩いてインストール作業を進めます．<br><a href="https://qiita.com/mo_chiee/items/f539df1bd172f41bc85a">ここ</a>を参考にして行いました．</p><h4 id="再度シリアルコンソールに出力"><a href="#再度シリアルコンソールに出力" class="headerlink" title="再度シリアルコンソールに出力"></a>再度シリアルコンソールに出力</h4><p>このままではインストールしたAlpine Linuxにはシリアルコンソールへの出力が<br>明記されていないので出力されないことになるのでその設定を行います．<br>(/dev/sda1はインストール時の設定次第なのでよしなに変えて下さい)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /media/ssd</span><br><span class="line">mount /dev/sda1 /media/ssd</span><br><span class="line">vi /media/ssd/extlinux.conf</span><br><span class="line">umount /media/ssd</span><br></pre></td></tr></table></figure><p><b>/media/ssd/extlinux.conf書き換え内容(APPENDのconsoleを追加)</b></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Generated by update-extlinux 6.04_pre1-r6</span><br><span class="line">DEFAULT menu.c32</span><br><span class="line">PROMPT 0</span><br><span class="line">MENU TITLE Alpine/Linux Boot Menu</span><br><span class="line">MENU HIDDEN</span><br><span class="line">MENU AUTOBOOT Alpine will be booted automatically in # seconds.</span><br><span class="line">TIMEOUT 30</span><br><span class="line">LABEL lts</span><br><span class="line">  MENU DEFAULT</span><br><span class="line">  MENU LABEL Linux lts</span><br><span class="line">  LINUX vmlinuz-lts</span><br><span class="line">  INITRD initramfs-lts</span><br><span class="line">  APPEND root=UUID=c00228bc-c19d-43b1-b3de-06a1e3f6a611 modules=sd-mod,usb-storage,ext4 console=tty0 console=ttyS0,115200n8 rootfstype=ext4</span><br><span class="line"></span><br><span class="line">MENU SEPARATOR</span><br></pre></td></tr></table></figure><p>これで再起動してSSDから起動してもシリアルコンソールに出力されるはずです．<br>電源を落としてUSBメモリを外してから起動しましょう．<br>あとは好きなようにAlpine Linuxを楽しみましょう</p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>それなりのスペックのマシンが実際に動くことが確認できた．<br>シリアルコンソール出力を行うには起動時のパラメータを設定する必要がある．</p><p>12V給電で動いたりLANポートがいっぱいあるので色々試してみたいと思います!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;DNSやDHCPを動かす用のマシンが欲しくなりそこまでスペックはいらないけど&lt;br&gt;安定稼働しそうなPCを探していたらトレンドマイクロ社が出しているCloud Edgeがいい&lt;br&gt;という話を聞いたので試してみました．&lt;/p&gt;</summary>
    
    
    
    
    <category term="ハードウェア" scheme="https://blog.nullnuma.com/tags/%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2/"/>
    
    <category term="パソコン" scheme="https://blog.nullnuma.com/tags/%E3%83%91%E3%82%BD%E3%82%B3%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>小型車両系建設機械特別教育を受講した</title>
    <link href="https://blog.nullnuma.com/small-vehicle-spedu/"/>
    <id>https://blog.nullnuma.com/small-vehicle-spedu/</id>
    <published>2020-11-07T11:00:00.000Z</published>
    <updated>2022-12-12T03:02:07.136Z</updated>
    
    <content type="html"><![CDATA[<p>小型車両系建設機械のうち整地・運搬・積み込み用<br>及び掘削用機械で機体質量が3t未満の車両が運転できます.</p><p>具体的に言えば小型のブルドーザーやショベルカー(俗に言うユンボ)です.  </p><p><img src="/assets/small-vehicle-spedu/Certificate_front.jpg" alt="Certificate_front"></p><span id="more"></span><p><img src="/assets/small-vehicle-spedu/Certificate_back.jpg" alt="Certificate_back"></p><h3 id="なぜ受講したか"><a href="#なぜ受講したか" class="headerlink" title="なぜ受講したか"></a>なぜ受講したか</h3><ul><li>ショベルカー運転できたらかっこいいな  </li><li>将来山買ったら(買うとは思えないけど)開拓できるな  </li></ul><p>というロマンを求めて受講しました.<br>仕事で使う予定は全くありません.<br>仕事で使わないにしろレンタルするときはこの資格は必要そうなことと<br>ユンボをちょっとでも運転してみたかったので…</p><h3 id="受講申し込み"><a href="#受講申し込み" class="headerlink" title="受講申し込み"></a>受講申し込み</h3><p>よくあるのはコマツやキャタピラー社に付随する教習所で<br>受講することですが通うには微妙な立地だったので<br>比較的アクセスがいい<a href="https://www.iti-a.co.jp/index.php">IHI技術教習所</a>へ行くことにしました.<br>小型車両系建設機械は1日目学科, 2日目実技の2日必要です.<br>Webから仮申込をしてFAXで申込書を送りました.<br>受講費用は17,000円で銀行振込します.  </p><h3 id="受講1日目-学科"><a href="#受講1日目-学科" class="headerlink" title="受講1日目(学科)"></a>受講1日目(学科)</h3><p>受講当日(1日目)は8:15までに受付で身分証明書を提示して<br>テキストを受け取ります.<br><img src="/assets/small-vehicle-spedu/text.jpg" alt="text"><br>学科自体は8:30-17:00までの予定で<br>おおよそ1時間ごとに10分休憩を挟んで12時に1時間休憩でした.<br>学科の内容はテキストを読み上げていくスタイルで<br>時々ビデオを見てそれの説明があるような感じです.<br>まあ眠い…すごく眠いですが時々ここ大事, 覚えておいて!と<br>言われるのでそこを入念に覚えます.<br>17時からはテストで20問の正誤マークでした.　　<br>不思議なことにここ大事と言われたところが出ていましたね.<br>特に問題なく合格し1日目は解散となりました.  </p><h3 id="受講2日目-実技"><a href="#受講2日目-実技" class="headerlink" title="受講2日目(実技)"></a>受講2日目(実技)</h3><p>実技は学科を受けた場所から少し離れた産廃処分場の隣にある<br>実技場で行いました.<br>講師が見本を見せて受講者が順番に動かしていくスタイルです.<br>午前中は走行ということでクローラを動かし前進, 後進を行いました.<br><img src="/assets/small-vehicle-spedu/running.png" alt="running"><br>2回ほど行い合計15分ほど運転しました.<br>走行するときはレバーの押し引きでクローラを動かし,<br>曲がるときは外側になる方のレバーを目一杯動かし, 内側のレバーを<br>微調整することでいい感じに操作できました.  </p><p>午後は掘削ということで砂地からバケットで砂をすくい上げて戻し,<br>均して上から締め固めることを2回で合計10分ほど行いました.<br>他の受講者がやっているときにジョイスティックをどう動かすか<br>イメージトレーニングをしておくのが大事だと思います.  </p><p>ただし, 受講者が合計12人いたので相当な待ち時間というか<br>ほとんど待ち時間で待つことに相当疲れました…  </p><p>特別教育ということで実技に試験はなくこれで終了でした.  </p><h3 id="終えて"><a href="#終えて" class="headerlink" title="終えて"></a>終えて</h3><p>学科はテキストを読み進めていくだけで眠くなり, 実技は待ち時間で疲れ<br>そういうところに忍耐が必要だと感じました…<br>仕事で使うわけではないのでこの資格はいつ使うことになるかは<br>わかりませんが, 持っていても損ではないので満足です.  </p><p>玉掛技能やトラックに付いている小型クレーン用の資格も取りたいなと<br>考えていますが, そちらは技能講習となり特別教育よりも<br>大変で難しいし, 使う予定もまったくないので悩みどころです.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;小型車両系建設機械のうち整地・運搬・積み込み用&lt;br&gt;及び掘削用機械で機体質量が3t未満の車両が運転できます.&lt;/p&gt;
&lt;p&gt;具体的に言えば小型のブルドーザーやショベルカー(俗に言うユンボ)です.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/small-vehicle-spedu/Certificate_front.jpg&quot; alt=&quot;Certificate_front&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="資格" scheme="https://blog.nullnuma.com/tags/%E8%B3%87%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>ZYNQ FPGAボードの製作2(基板図)</title>
    <link href="https://blog.nullnuma.com/zynq-fpgaboard-2/"/>
    <id>https://blog.nullnuma.com/zynq-fpgaboard-2/</id>
    <published>2020-10-31T12:00:00.000Z</published>
    <updated>2022-12-12T03:02:07.136Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/zynq-fpgaboard-1">前回は回路図</a>を書きました.<br>今回は実際に基板に起こしていく作業です.  </p><span id="more"></span><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>それぞれのICをどこに配置するかが一番重要です.<br>配置が悪いと配線が無駄に交差してしまい, 最悪の場合配線できなくなるので…<br>基本的には前回のブロックダイアグラムのような配置となっています.  </p><h3 id="配線"><a href="#配線" class="headerlink" title="配線"></a>配線</h3><h4 id="電源IC"><a href="#電源IC" class="headerlink" title="電源IC"></a>電源IC</h4><p>電源ICは電圧違い(抵抗の変更による)の同じ構成なのでICと抵抗, コンデンサを<br>それぞれのグループごとに作成しておきました.<br><img src="/assets/zynq-fpgaboard-2/PowerIC.png" alt="電源IC"></p><h4 id="PS側メモリ"><a href="#PS側メモリ" class="headerlink" title="PS側メモリ"></a>PS側メモリ</h4><p>PS側のメモリのピン配置についてですがアドレス線は変更できないので<br>頑張って引くだけです.<br>なひたふさんの<a href="http://nahitafu.cocolog-nifty.com/nahitafu/2019/03/zynqddr3-f743.html">ZYNQ用DDR3メモリの配線戦略</a>の記事がとても参考になりました.<br>それぞれの配線をまとまりで考えることで引きやすさが格段に変わります.<br>メモリの配線はインピーダンス整合をしなきゃいけないらしいのですが<br>まったくもって知識が不足しているのでまあ行けるでしょということで何も考えていません…<br>教えてほしい  </p><p>そのときのツイート</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">1組のDDR3メモリ配線はかけた<br>もう1組PL側のMIG用DDR3メモリ作らねば <a href="https://t.co/R4kABykWoT">pic.twitter.com/R4kABykWoT</a></p>&mdash; nullnuma :( (@nullnuma) <a href="https://twitter.com/nullnuma/status/1319777167715135488?ref_src=twsrc%5Etfw">October 23, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h4 id="PL側メモリ"><a href="#PL側メモリ" class="headerlink" title="PL側メモリ"></a>PL側メモリ</h4><p>PL側のメモリは自由にピン配置を決定できるので, メモリ同士のアドレス線を接続したあと,<br>うまく接続しやすいように随時入れ替えていきました.<br>メモリが接続できてしまえばとても気が楽です.  </p><p>そのときのツイート</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">メモリの大まかな配線できた<br>クロックの等長配線とコンデンサが未配置 <a href="https://t.co/9Kmy5V6ZFE">pic.twitter.com/9Kmy5V6ZFE</a></p>&mdash; nullnuma :( (@nullnuma) <a href="https://twitter.com/nullnuma/status/1320723903858184193?ref_src=twsrc%5Etfw">October 26, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>メモリの配線が終わったあと<br><img src="/assets/zynq-fpgaboard-2/MemEnd.png" alt="メモリ配線終わり"></p><h4 id="その他のICたち"><a href="#その他のICたち" class="headerlink" title="その他のICたち"></a>その他のICたち</h4><p>EthernetやmicroSD, USBなどのICたちの配線はメモリで力尽きてしまったので,<br>自動配線ツールのFreerouterに丸投げする暴挙に出ました.<br>このツールは既に配線しているもの影響を与えないように配線するので,<br>あまりにも物理的に無理なところは最後ずっと配線しようと膠着状態になってしまいます.<br>なので時々見てあげて配線ができていなかったところは先に配線をし直して<br>再度自動配線を行うことを数回繰り返しました.<br>ちゃんと配線できて素晴らしい!<br><img src="/assets/zynq-fpgaboard-2/FreerouterEnd.png" alt="ほぼ配線終わり"></p><h4 id="ユーザIO"><a href="#ユーザIO" class="headerlink" title="ユーザIO"></a>ユーザIO</h4><p>自動配線でユーザIOも配線されましたが, ちょっと微妙なので<br>頑張って2時間半かけ自分で配線し直しました…  </p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>まだ電源の配線が怪しいので最後調整するつもりですが<br>基本的な配線は出来上がりました!</p><p><b>表面</b><br><img src="/assets/zynq-fpgaboard-2/L1.png" alt="L1"><br><b>内層1(GND)</b><br><img src="/assets/zynq-fpgaboard-2/L2.png" alt="L2"><br><b>内層2</b><br><img src="/assets/zynq-fpgaboard-2/L3.png" alt="L3"><br><b>内層3</b><br><img src="/assets/zynq-fpgaboard-2/L4.png" alt="L4"><br><b>内層4</b><br><img src="/assets/zynq-fpgaboard-2/L5.png" alt="L5"><br><b>裏面</b><br><img src="/assets/zynq-fpgaboard-2/L6.png" alt="L6"></p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>どうにか配線をすることができました.<br>ただしこれがちゃんと動くのかどうか, 自分が期待する性能が出るのかは<br>まったくもって未知数ですが, 経験という意味で頑張って製造及び実装まで<br>持っていきたいと思います.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/zynq-fpgaboard-1&quot;&gt;前回は回路図&lt;/a&gt;を書きました.&lt;br&gt;今回は実際に基板に起こしていく作業です.  &lt;/p&gt;</summary>
    
    
    
    
    <category term="ハードウェア" scheme="https://blog.nullnuma.com/tags/%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2/"/>
    
    <category term="FPGA" scheme="https://blog.nullnuma.com/tags/FPGA/"/>
    
  </entry>
  
  <entry>
    <title>ZYNQ FPGAボードの製作1(回路図)</title>
    <link href="https://blog.nullnuma.com/zynq-fpgaboard-1/"/>
    <id>https://blog.nullnuma.com/zynq-fpgaboard-1/</id>
    <published>2020-10-30T11:00:00.000Z</published>
    <updated>2022-12-12T03:02:07.136Z</updated>
    
    <content type="html"><![CDATA[<p>DigilentのPYNQボードを使ってHDMIの入出力に関するプログラムを<br>ぼちぼち書いていたのですが, このボードではHDMIの入力が1系統しかないのと<br>メモリの帯域幅が足りないという問題に直面していました.</p><p>そこで自分好みのFPGAボードを作ろうということではじめました.</p><span id="more"></span><h3 id="方針"><a href="#方針" class="headerlink" title="方針"></a>方針</h3><p>必要な項目として以下の2点が上げられます.</p><ul><li>HDMIの入出力ポートが多く付けられる</li><li>メモリの帯域幅とバンクを増やす</li></ul><p>使用するFPGAはPYNQを踏襲しZYNQシリーズでXC7Z020です.<br>調べたところJLCPCBで6層基板を比較的安価で製造できそうなのと<br>6層基板ならBGA484ピンでもなんとかなりそうなので<br>XC7Z020-CLG48を使うことにしました.</p><p>メモリの帯域幅とバンクを増やすにはPS側のメモリだけでなくPL側にも<br>メモリを載せてしまうのが手っ取り早い解決策なのでPS及びPLにメモリが載ります.</p><p>また利便性を高めるためにFPGAボード自体に直接コネクタ類をつけるのではなく<br>ボードtoボードのコネクタを付けて別途拡張ボードを作ることで<br>拡張性をあげようと思います.</p><h3 id="設計"><a href="#設計" class="headerlink" title="設計"></a>設計</h3><p>設計するに当たり<a href="https://www.acri.c.titech.ac.jp/wordpress/archives/1244">このサイト(ACRi)</a>を参考にさせてもらいました.<br>タイミングよく公開されていてとても役立ちました.<br>また, DigilentのFPGAボード PYNQやArtyも参考にしています.<br>ブロックデザインはこの通りです.<br><img src="/assets/zynq-fpgaboard-1/ZynqBoardBlockDiagram.png" alt="ブロックデザイン"></p><h4 id="PS側-ZYNQ側"><a href="#PS側-ZYNQ側" class="headerlink" title="PS側(ZYNQ側)"></a>PS側(ZYNQ側)</h4><p>ZYNQに付随するメモリはせっかくなので1GBを搭載し,<br>microSDやQSPIもこのボードに載せます.</p><p>USBやEthernetも拡張ボード側で載せるとなるとSMD部品の実装が面倒だと<br>考えたのでこのボード側で必要な変換を済ませてしまいます.</p><p>この辺の配置は基本ピン配置が決まっているので<br>ただただICの仕様を比較し, 接続するだけの作業です.</p><h4 id="PL側"><a href="#PL側" class="headerlink" title="PL側"></a>PL側</h4><p>このFPGAにはバンクが13,33,34,35の4種類があります.<br>まずメモリについてですが<br>32bit幅でメモリを搭載するとなるとバンクは2個消費し, かつ垂直に隣り合ったバンクしか<br>使用することができない制限があるため, 以下の図よりバンク34,35を使用します.<br><img src="/assets/zynq-fpgaboard-1/UG865_XC7Z020_Pin.png" alt="ピン配置"><br>(<a href="https://japan.xilinx.com/support/documentation/user_guides/j_ug865-Zynq-7000-Pkg-Pinout.pdf">https://japan.xilinx.com/support/documentation/user_guides/j_ug865-Zynq-7000-Pkg-Pinout.pdf</a>)</p><p>バンク内にも更に4分割されていてアドレス用として2グループ,<br>データ用はデータ0-7, データ8-15, データ16-23, データ24-31とわけて4ブロック使用します.<br><img src="/assets/zynq-fpgaboard-1/UG865_XC7Z020_Bank.png" alt="バンク配置"><br>(<a href="https://japan.xilinx.com/support/documentation/user_guides/j_ug865-Zynq-7000-Pkg-Pinout.pdf">https://japan.xilinx.com/support/documentation/user_guides/j_ug865-Zynq-7000-Pkg-Pinout.pdf</a>)</p><p>クロック等のピンアサインには制限があるもののほかは<br>ほぼすべて好きなように配置できる(FPGAのいいところ!)ので<br>実際に基板を描いているときに随時入れ替えました.<br>配置するたびに問題ないピンアサインかVivadoのMIGジェネレーターで<br>確認を取りつつ設計しています.</p><p><img src="/assets/zynq-fpgaboard-1/Bank3435.png" alt="Bank3435"><br><img src="/assets/zynq-fpgaboard-1/PL_DDR.png" alt="PL_DDR"></p><p>ユーザIOについてはバンク13,33をそのままコネクタへ接続する形にしました.<br>100ピンあればいい感じに使えるでしょう.</p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>回路図の作成については既にあるFPGAボードを参考に作り上げることができました.<br>ピンの役割さえわかれば設計は単純な反復作業が多いことがわかりました.<br>もっと効率よくできればいいんですが…  </p><p>特にメモリについては情報があまりなかったのでVivadoのピン配置で問題ないかを<br>確認していたのですがエラーならエラーとしか出さないので<br>どの配置がエラー吐いてるのかよくわからなかったのが辛いです.  </p><h3 id="次回は"><a href="#次回は" class="headerlink" title="次回は"></a>次回は</h3><p>この時点で実際に基板にすべて配線を終えることができるのかわからなかったのと<br>メモリ関連の配線のやる気がなさすぎて7月ぐらいに設計したのに<br>基板に起こす作業は10月下旬まで先延ばしにしていました…<br>いざ起こすとなると1週間かからずできましたのでそれについて次回書きます</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;DigilentのPYNQボードを使ってHDMIの入出力に関するプログラムを&lt;br&gt;ぼちぼち書いていたのですが, このボードではHDMIの入力が1系統しかないのと&lt;br&gt;メモリの帯域幅が足りないという問題に直面していました.&lt;/p&gt;
&lt;p&gt;そこで自分好みのFPGAボードを作ろうということではじめました.&lt;/p&gt;</summary>
    
    
    
    
    <category term="ハードウェア" scheme="https://blog.nullnuma.com/tags/%E3%83%8F%E3%83%BC%E3%83%89%E3%82%A6%E3%82%A7%E3%82%A2/"/>
    
    <category term="FPGA" scheme="https://blog.nullnuma.com/tags/FPGA/"/>
    
  </entry>
  
</feed>
